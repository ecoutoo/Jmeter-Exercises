/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 237.0, "minX": 0.0, "maxY": 26636.0, "series": [{"data": [[0.0, 237.0], [0.1, 241.0], [0.2, 243.0], [0.3, 244.0], [0.4, 244.0], [0.5, 245.0], [0.6, 245.0], [0.7, 246.0], [0.8, 247.0], [0.9, 247.0], [1.0, 247.0], [1.1, 248.0], [1.2, 248.0], [1.3, 249.0], [1.4, 249.0], [1.5, 249.0], [1.6, 250.0], [1.7, 250.0], [1.8, 250.0], [1.9, 251.0], [2.0, 251.0], [2.1, 251.0], [2.2, 251.0], [2.3, 252.0], [2.4, 252.0], [2.5, 252.0], [2.6, 252.0], [2.7, 253.0], [2.8, 253.0], [2.9, 253.0], [3.0, 253.0], [3.1, 254.0], [3.2, 254.0], [3.3, 254.0], [3.4, 254.0], [3.5, 255.0], [3.6, 255.0], [3.7, 255.0], [3.8, 256.0], [3.9, 256.0], [4.0, 256.0], [4.1, 256.0], [4.2, 256.0], [4.3, 257.0], [4.4, 257.0], [4.5, 257.0], [4.6, 257.0], [4.7, 258.0], [4.8, 258.0], [4.9, 258.0], [5.0, 258.0], [5.1, 258.0], [5.2, 259.0], [5.3, 259.0], [5.4, 259.0], [5.5, 259.0], [5.6, 259.0], [5.7, 260.0], [5.8, 260.0], [5.9, 260.0], [6.0, 260.0], [6.1, 261.0], [6.2, 261.0], [6.3, 261.0], [6.4, 261.0], [6.5, 262.0], [6.6, 262.0], [6.7, 262.0], [6.8, 262.0], [6.9, 263.0], [7.0, 263.0], [7.1, 263.0], [7.2, 263.0], [7.3, 263.0], [7.4, 263.0], [7.5, 264.0], [7.6, 264.0], [7.7, 264.0], [7.8, 264.0], [7.9, 264.0], [8.0, 265.0], [8.1, 265.0], [8.2, 265.0], [8.3, 265.0], [8.4, 265.0], [8.5, 266.0], [8.6, 266.0], [8.7, 266.0], [8.8, 266.0], [8.9, 266.0], [9.0, 267.0], [9.1, 267.0], [9.2, 267.0], [9.3, 267.0], [9.4, 267.0], [9.5, 267.0], [9.6, 267.0], [9.7, 268.0], [9.8, 268.0], [9.9, 268.0], [10.0, 268.0], [10.1, 269.0], [10.2, 269.0], [10.3, 269.0], [10.4, 269.0], [10.5, 269.0], [10.6, 269.0], [10.7, 269.0], [10.8, 270.0], [10.9, 270.0], [11.0, 270.0], [11.1, 270.0], [11.2, 270.0], [11.3, 271.0], [11.4, 271.0], [11.5, 271.0], [11.6, 271.0], [11.7, 271.0], [11.8, 272.0], [11.9, 272.0], [12.0, 272.0], [12.1, 272.0], [12.2, 272.0], [12.3, 273.0], [12.4, 273.0], [12.5, 273.0], [12.6, 273.0], [12.7, 273.0], [12.8, 273.0], [12.9, 274.0], [13.0, 274.0], [13.1, 274.0], [13.2, 274.0], [13.3, 274.0], [13.4, 274.0], [13.5, 275.0], [13.6, 275.0], [13.7, 275.0], [13.8, 275.0], [13.9, 275.0], [14.0, 276.0], [14.1, 276.0], [14.2, 276.0], [14.3, 276.0], [14.4, 277.0], [14.5, 277.0], [14.6, 277.0], [14.7, 277.0], [14.8, 277.0], [14.9, 277.0], [15.0, 277.0], [15.1, 278.0], [15.2, 278.0], [15.3, 278.0], [15.4, 278.0], [15.5, 278.0], [15.6, 279.0], [15.7, 279.0], [15.8, 279.0], [15.9, 279.0], [16.0, 279.0], [16.1, 280.0], [16.2, 280.0], [16.3, 280.0], [16.4, 280.0], [16.5, 280.0], [16.6, 281.0], [16.7, 281.0], [16.8, 281.0], [16.9, 281.0], [17.0, 281.0], [17.1, 282.0], [17.2, 282.0], [17.3, 282.0], [17.4, 282.0], [17.5, 282.0], [17.6, 282.0], [17.7, 283.0], [17.8, 283.0], [17.9, 283.0], [18.0, 283.0], [18.1, 284.0], [18.2, 284.0], [18.3, 284.0], [18.4, 284.0], [18.5, 284.0], [18.6, 285.0], [18.7, 285.0], [18.8, 285.0], [18.9, 285.0], [19.0, 285.0], [19.1, 286.0], [19.2, 286.0], [19.3, 286.0], [19.4, 286.0], [19.5, 287.0], [19.6, 287.0], [19.7, 287.0], [19.8, 287.0], [19.9, 287.0], [20.0, 288.0], [20.1, 288.0], [20.2, 288.0], [20.3, 288.0], [20.4, 289.0], [20.5, 289.0], [20.6, 289.0], [20.7, 289.0], [20.8, 289.0], [20.9, 290.0], [21.0, 290.0], [21.1, 290.0], [21.2, 290.0], [21.3, 291.0], [21.4, 291.0], [21.5, 291.0], [21.6, 291.0], [21.7, 292.0], [21.8, 292.0], [21.9, 292.0], [22.0, 292.0], [22.1, 293.0], [22.2, 293.0], [22.3, 293.0], [22.4, 293.0], [22.5, 294.0], [22.6, 294.0], [22.7, 294.0], [22.8, 294.0], [22.9, 295.0], [23.0, 295.0], [23.1, 295.0], [23.2, 296.0], [23.3, 296.0], [23.4, 296.0], [23.5, 296.0], [23.6, 297.0], [23.7, 297.0], [23.8, 297.0], [23.9, 298.0], [24.0, 298.0], [24.1, 298.0], [24.2, 298.0], [24.3, 299.0], [24.4, 299.0], [24.5, 299.0], [24.6, 300.0], [24.7, 300.0], [24.8, 300.0], [24.9, 300.0], [25.0, 301.0], [25.1, 301.0], [25.2, 301.0], [25.3, 301.0], [25.4, 302.0], [25.5, 302.0], [25.6, 302.0], [25.7, 302.0], [25.8, 303.0], [25.9, 303.0], [26.0, 303.0], [26.1, 303.0], [26.2, 304.0], [26.3, 304.0], [26.4, 305.0], [26.5, 305.0], [26.6, 305.0], [26.7, 305.0], [26.8, 306.0], [26.9, 306.0], [27.0, 306.0], [27.1, 307.0], [27.2, 307.0], [27.3, 307.0], [27.4, 307.0], [27.5, 308.0], [27.6, 308.0], [27.7, 308.0], [27.8, 309.0], [27.9, 309.0], [28.0, 309.0], [28.1, 310.0], [28.2, 310.0], [28.3, 310.0], [28.4, 311.0], [28.5, 311.0], [28.6, 311.0], [28.7, 311.0], [28.8, 312.0], [28.9, 312.0], [29.0, 312.0], [29.1, 312.0], [29.2, 313.0], [29.3, 313.0], [29.4, 313.0], [29.5, 314.0], [29.6, 314.0], [29.7, 314.0], [29.8, 314.0], [29.9, 315.0], [30.0, 315.0], [30.1, 315.0], [30.2, 316.0], [30.3, 316.0], [30.4, 316.0], [30.5, 317.0], [30.6, 317.0], [30.7, 317.0], [30.8, 317.0], [30.9, 318.0], [31.0, 318.0], [31.1, 319.0], [31.2, 319.0], [31.3, 319.0], [31.4, 320.0], [31.5, 320.0], [31.6, 320.0], [31.7, 320.0], [31.8, 321.0], [31.9, 321.0], [32.0, 321.0], [32.1, 322.0], [32.2, 322.0], [32.3, 322.0], [32.4, 323.0], [32.5, 323.0], [32.6, 323.0], [32.7, 323.0], [32.8, 324.0], [32.9, 324.0], [33.0, 324.0], [33.1, 325.0], [33.2, 325.0], [33.3, 325.0], [33.4, 326.0], [33.5, 326.0], [33.6, 326.0], [33.7, 326.0], [33.8, 327.0], [33.9, 327.0], [34.0, 327.0], [34.1, 328.0], [34.2, 328.0], [34.3, 328.0], [34.4, 329.0], [34.5, 329.0], [34.6, 329.0], [34.7, 330.0], [34.8, 330.0], [34.9, 330.0], [35.0, 330.0], [35.1, 331.0], [35.2, 331.0], [35.3, 332.0], [35.4, 332.0], [35.5, 332.0], [35.6, 333.0], [35.7, 333.0], [35.8, 333.0], [35.9, 333.0], [36.0, 334.0], [36.1, 334.0], [36.2, 334.0], [36.3, 335.0], [36.4, 335.0], [36.5, 335.0], [36.6, 335.0], [36.7, 336.0], [36.8, 336.0], [36.9, 336.0], [37.0, 337.0], [37.1, 337.0], [37.2, 337.0], [37.3, 338.0], [37.4, 338.0], [37.5, 338.0], [37.6, 338.0], [37.7, 339.0], [37.8, 339.0], [37.9, 339.0], [38.0, 339.0], [38.1, 340.0], [38.2, 340.0], [38.3, 340.0], [38.4, 341.0], [38.5, 341.0], [38.6, 341.0], [38.7, 341.0], [38.8, 342.0], [38.9, 342.0], [39.0, 342.0], [39.1, 343.0], [39.2, 343.0], [39.3, 343.0], [39.4, 344.0], [39.5, 344.0], [39.6, 344.0], [39.7, 344.0], [39.8, 345.0], [39.9, 345.0], [40.0, 346.0], [40.1, 346.0], [40.2, 346.0], [40.3, 346.0], [40.4, 347.0], [40.5, 347.0], [40.6, 347.0], [40.7, 347.0], [40.8, 348.0], [40.9, 348.0], [41.0, 349.0], [41.1, 349.0], [41.2, 349.0], [41.3, 350.0], [41.4, 350.0], [41.5, 350.0], [41.6, 351.0], [41.7, 351.0], [41.8, 351.0], [41.9, 352.0], [42.0, 352.0], [42.1, 352.0], [42.2, 353.0], [42.3, 353.0], [42.4, 353.0], [42.5, 354.0], [42.6, 354.0], [42.7, 354.0], [42.8, 354.0], [42.9, 355.0], [43.0, 355.0], [43.1, 355.0], [43.2, 356.0], [43.3, 356.0], [43.4, 357.0], [43.5, 357.0], [43.6, 357.0], [43.7, 358.0], [43.8, 358.0], [43.9, 359.0], [44.0, 359.0], [44.1, 359.0], [44.2, 360.0], [44.3, 360.0], [44.4, 361.0], [44.5, 361.0], [44.6, 362.0], [44.7, 362.0], [44.8, 362.0], [44.9, 363.0], [45.0, 363.0], [45.1, 364.0], [45.2, 364.0], [45.3, 365.0], [45.4, 365.0], [45.5, 366.0], [45.6, 366.0], [45.7, 367.0], [45.8, 367.0], [45.9, 368.0], [46.0, 368.0], [46.1, 369.0], [46.2, 369.0], [46.3, 370.0], [46.4, 370.0], [46.5, 370.0], [46.6, 371.0], [46.7, 371.0], [46.8, 372.0], [46.9, 372.0], [47.0, 373.0], [47.1, 373.0], [47.2, 374.0], [47.3, 374.0], [47.4, 375.0], [47.5, 375.0], [47.6, 376.0], [47.7, 377.0], [47.8, 377.0], [47.9, 378.0], [48.0, 378.0], [48.1, 379.0], [48.2, 379.0], [48.3, 379.0], [48.4, 380.0], [48.5, 380.0], [48.6, 381.0], [48.7, 382.0], [48.8, 382.0], [48.9, 383.0], [49.0, 383.0], [49.1, 384.0], [49.2, 385.0], [49.3, 385.0], [49.4, 386.0], [49.5, 387.0], [49.6, 388.0], [49.7, 389.0], [49.8, 389.0], [49.9, 390.0], [50.0, 391.0], [50.1, 392.0], [50.2, 392.0], [50.3, 393.0], [50.4, 394.0], [50.5, 395.0], [50.6, 395.0], [50.7, 397.0], [50.8, 398.0], [50.9, 399.0], [51.0, 400.0], [51.1, 401.0], [51.2, 402.0], [51.3, 403.0], [51.4, 404.0], [51.5, 404.0], [51.6, 405.0], [51.7, 406.0], [51.8, 407.0], [51.9, 408.0], [52.0, 409.0], [52.1, 410.0], [52.2, 411.0], [52.3, 412.0], [52.4, 413.0], [52.5, 414.0], [52.6, 415.0], [52.7, 417.0], [52.8, 417.0], [52.9, 418.0], [53.0, 419.0], [53.1, 420.0], [53.2, 421.0], [53.3, 423.0], [53.4, 423.0], [53.5, 424.0], [53.6, 425.0], [53.7, 426.0], [53.8, 427.0], [53.9, 429.0], [54.0, 429.0], [54.1, 430.0], [54.2, 431.0], [54.3, 432.0], [54.4, 434.0], [54.5, 435.0], [54.6, 436.0], [54.7, 437.0], [54.8, 438.0], [54.9, 440.0], [55.0, 441.0], [55.1, 443.0], [55.2, 444.0], [55.3, 445.0], [55.4, 446.0], [55.5, 448.0], [55.6, 449.0], [55.7, 450.0], [55.8, 451.0], [55.9, 452.0], [56.0, 454.0], [56.1, 456.0], [56.2, 457.0], [56.3, 458.0], [56.4, 459.0], [56.5, 461.0], [56.6, 462.0], [56.7, 463.0], [56.8, 465.0], [56.9, 466.0], [57.0, 467.0], [57.1, 469.0], [57.2, 470.0], [57.3, 472.0], [57.4, 473.0], [57.5, 474.0], [57.6, 475.0], [57.7, 476.0], [57.8, 477.0], [57.9, 479.0], [58.0, 481.0], [58.1, 482.0], [58.2, 483.0], [58.3, 485.0], [58.4, 486.0], [58.5, 488.0], [58.6, 489.0], [58.7, 490.0], [58.8, 492.0], [58.9, 493.0], [59.0, 495.0], [59.1, 497.0], [59.2, 499.0], [59.3, 500.0], [59.4, 502.0], [59.5, 504.0], [59.6, 505.0], [59.7, 506.0], [59.8, 508.0], [59.9, 510.0], [60.0, 511.0], [60.1, 512.0], [60.2, 513.0], [60.3, 515.0], [60.4, 516.0], [60.5, 518.0], [60.6, 520.0], [60.7, 522.0], [60.8, 523.0], [60.9, 525.0], [61.0, 526.0], [61.1, 529.0], [61.2, 530.0], [61.3, 532.0], [61.4, 533.0], [61.5, 536.0], [61.6, 538.0], [61.7, 539.0], [61.8, 541.0], [61.9, 542.0], [62.0, 544.0], [62.1, 546.0], [62.2, 548.0], [62.3, 551.0], [62.4, 552.0], [62.5, 554.0], [62.6, 556.0], [62.7, 558.0], [62.8, 560.0], [62.9, 561.0], [63.0, 563.0], [63.1, 565.0], [63.2, 567.0], [63.3, 569.0], [63.4, 570.0], [63.5, 573.0], [63.6, 576.0], [63.7, 578.0], [63.8, 580.0], [63.9, 581.0], [64.0, 583.0], [64.1, 584.0], [64.2, 586.0], [64.3, 588.0], [64.4, 590.0], [64.5, 592.0], [64.6, 593.0], [64.7, 595.0], [64.8, 596.0], [64.9, 598.0], [65.0, 600.0], [65.1, 602.0], [65.2, 603.0], [65.3, 606.0], [65.4, 608.0], [65.5, 610.0], [65.6, 611.0], [65.7, 613.0], [65.8, 614.0], [65.9, 616.0], [66.0, 619.0], [66.1, 621.0], [66.2, 623.0], [66.3, 625.0], [66.4, 628.0], [66.5, 630.0], [66.6, 632.0], [66.7, 634.0], [66.8, 636.0], [66.9, 638.0], [67.0, 640.0], [67.1, 642.0], [67.2, 644.0], [67.3, 646.0], [67.4, 648.0], [67.5, 650.0], [67.6, 652.0], [67.7, 654.0], [67.8, 656.0], [67.9, 658.0], [68.0, 660.0], [68.1, 661.0], [68.2, 663.0], [68.3, 665.0], [68.4, 666.0], [68.5, 669.0], [68.6, 671.0], [68.7, 673.0], [68.8, 676.0], [68.9, 679.0], [69.0, 680.0], [69.1, 682.0], [69.2, 685.0], [69.3, 687.0], [69.4, 690.0], [69.5, 692.0], [69.6, 694.0], [69.7, 697.0], [69.8, 699.0], [69.9, 700.0], [70.0, 701.0], [70.1, 703.0], [70.2, 706.0], [70.3, 708.0], [70.4, 711.0], [70.5, 713.0], [70.6, 715.0], [70.7, 717.0], [70.8, 720.0], [70.9, 722.0], [71.0, 725.0], [71.1, 728.0], [71.2, 731.0], [71.3, 736.0], [71.4, 738.0], [71.5, 741.0], [71.6, 744.0], [71.7, 745.0], [71.8, 748.0], [71.9, 749.0], [72.0, 752.0], [72.1, 754.0], [72.2, 755.0], [72.3, 757.0], [72.4, 759.0], [72.5, 763.0], [72.6, 764.0], [72.7, 769.0], [72.8, 772.0], [72.9, 774.0], [73.0, 777.0], [73.1, 779.0], [73.2, 783.0], [73.3, 787.0], [73.4, 790.0], [73.5, 793.0], [73.6, 795.0], [73.7, 798.0], [73.8, 801.0], [73.9, 805.0], [74.0, 807.0], [74.1, 811.0], [74.2, 813.0], [74.3, 815.0], [74.4, 819.0], [74.5, 820.0], [74.6, 825.0], [74.7, 829.0], [74.8, 833.0], [74.9, 835.0], [75.0, 838.0], [75.1, 841.0], [75.2, 844.0], [75.3, 846.0], [75.4, 850.0], [75.5, 853.0], [75.6, 855.0], [75.7, 859.0], [75.8, 863.0], [75.9, 867.0], [76.0, 871.0], [76.1, 875.0], [76.2, 877.0], [76.3, 881.0], [76.4, 883.0], [76.5, 886.0], [76.6, 890.0], [76.7, 894.0], [76.8, 898.0], [76.9, 903.0], [77.0, 906.0], [77.1, 911.0], [77.2, 916.0], [77.3, 919.0], [77.4, 923.0], [77.5, 927.0], [77.6, 930.0], [77.7, 935.0], [77.8, 938.0], [77.9, 941.0], [78.0, 945.0], [78.1, 950.0], [78.2, 954.0], [78.3, 957.0], [78.4, 962.0], [78.5, 967.0], [78.6, 971.0], [78.7, 973.0], [78.8, 979.0], [78.9, 983.0], [79.0, 987.0], [79.1, 991.0], [79.2, 995.0], [79.3, 999.0], [79.4, 1003.0], [79.5, 1008.0], [79.6, 1012.0], [79.7, 1015.0], [79.8, 1022.0], [79.9, 1025.0], [80.0, 1030.0], [80.1, 1037.0], [80.2, 1041.0], [80.3, 1047.0], [80.4, 1053.0], [80.5, 1058.0], [80.6, 1062.0], [80.7, 1066.0], [80.8, 1071.0], [80.9, 1075.0], [81.0, 1078.0], [81.1, 1084.0], [81.2, 1088.0], [81.3, 1094.0], [81.4, 1098.0], [81.5, 1102.0], [81.6, 1107.0], [81.7, 1111.0], [81.8, 1118.0], [81.9, 1123.0], [82.0, 1131.0], [82.1, 1137.0], [82.2, 1142.0], [82.3, 1146.0], [82.4, 1150.0], [82.5, 1156.0], [82.6, 1163.0], [82.7, 1169.0], [82.8, 1176.0], [82.9, 1186.0], [83.0, 1192.0], [83.1, 1199.0], [83.2, 1206.0], [83.3, 1215.0], [83.4, 1222.0], [83.5, 1229.0], [83.6, 1237.0], [83.7, 1245.0], [83.8, 1251.0], [83.9, 1258.0], [84.0, 1271.0], [84.1, 1281.0], [84.2, 1287.0], [84.3, 1294.0], [84.4, 1299.0], [84.5, 1307.0], [84.6, 1315.0], [84.7, 1324.0], [84.8, 1332.0], [84.9, 1339.0], [85.0, 1346.0], [85.1, 1355.0], [85.2, 1370.0], [85.3, 1375.0], [85.4, 1385.0], [85.5, 1391.0], [85.6, 1400.0], [85.7, 1408.0], [85.8, 1418.0], [85.9, 1428.0], [86.0, 1434.0], [86.1, 1445.0], [86.2, 1459.0], [86.3, 1468.0], [86.4, 1473.0], [86.5, 1479.0], [86.6, 1487.0], [86.7, 1496.0], [86.8, 1509.0], [86.9, 1519.0], [87.0, 1525.0], [87.1, 1532.0], [87.2, 1546.0], [87.3, 1560.0], [87.4, 1569.0], [87.5, 1573.0], [87.6, 1582.0], [87.7, 1594.0], [87.8, 1604.0], [87.9, 1612.0], [88.0, 1620.0], [88.1, 1631.0], [88.2, 1642.0], [88.3, 1653.0], [88.4, 1667.0], [88.5, 1680.0], [88.6, 1689.0], [88.7, 1698.0], [88.8, 1707.0], [88.9, 1717.0], [89.0, 1731.0], [89.1, 1740.0], [89.2, 1750.0], [89.3, 1763.0], [89.4, 1771.0], [89.5, 1786.0], [89.6, 1798.0], [89.7, 1809.0], [89.8, 1817.0], [89.9, 1831.0], [90.0, 1843.0], [90.1, 1858.0], [90.2, 1875.0], [90.3, 1892.0], [90.4, 1905.0], [90.5, 1915.0], [90.6, 1928.0], [90.7, 1941.0], [90.8, 1953.0], [90.9, 1964.0], [91.0, 1980.0], [91.1, 1993.0], [91.2, 2003.0], [91.3, 2018.0], [91.4, 2039.0], [91.5, 2055.0], [91.6, 2070.0], [91.7, 2090.0], [91.8, 2106.0], [91.9, 2126.0], [92.0, 2138.0], [92.1, 2157.0], [92.2, 2177.0], [92.3, 2196.0], [92.4, 2212.0], [92.5, 2235.0], [92.6, 2259.0], [92.7, 2277.0], [92.8, 2287.0], [92.9, 2315.0], [93.0, 2334.0], [93.1, 2349.0], [93.2, 2372.0], [93.3, 2393.0], [93.4, 2406.0], [93.5, 2424.0], [93.6, 2440.0], [93.7, 2452.0], [93.8, 2473.0], [93.9, 2487.0], [94.0, 2504.0], [94.1, 2523.0], [94.2, 2541.0], [94.3, 2569.0], [94.4, 2599.0], [94.5, 2621.0], [94.6, 2645.0], [94.7, 2669.0], [94.8, 2689.0], [94.9, 2708.0], [95.0, 2731.0], [95.1, 2761.0], [95.2, 2796.0], [95.3, 2837.0], [95.4, 2859.0], [95.5, 2879.0], [95.6, 2913.0], [95.7, 2958.0], [95.8, 3002.0], [95.9, 3029.0], [96.0, 3055.0], [96.1, 3075.0], [96.2, 3100.0], [96.3, 3134.0], [96.4, 3187.0], [96.5, 3241.0], [96.6, 3263.0], [96.7, 3291.0], [96.8, 3311.0], [96.9, 3341.0], [97.0, 3365.0], [97.1, 3403.0], [97.2, 3442.0], [97.3, 3487.0], [97.4, 3522.0], [97.5, 3561.0], [97.6, 3625.0], [97.7, 3673.0], [97.8, 3755.0], [97.9, 3876.0], [98.0, 3995.0], [98.1, 4222.0], [98.2, 4421.0], [98.3, 4736.0], [98.4, 5572.0], [98.5, 6658.0], [98.6, 8868.0], [98.7, 9507.0], [98.8, 9613.0], [98.9, 9766.0], [99.0, 9916.0], [99.1, 10187.0], [99.2, 10257.0], [99.3, 10308.0], [99.4, 10345.0], [99.5, 10461.0], [99.6, 10926.0], [99.7, 11657.0], [99.8, 12273.0], [99.9, 14237.0], [100.0, 26636.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 4514.0, "series": [{"data": [[200.0, 4206.0], [300.0, 4514.0], [400.0, 1418.0], [500.0, 977.0], [600.0, 840.0], [700.0, 660.0], [800.0, 530.0], [900.0, 425.0], [1000.0, 362.0], [1100.0, 287.0], [1200.0, 222.0], [1300.0, 203.0], [1400.0, 196.0], [1500.0, 175.0], [1600.0, 163.0], [1700.0, 155.0], [1800.0, 131.0], [1900.0, 130.0], [2000.0, 106.0], [2100.0, 94.0], [2200.0, 90.0], [2300.0, 87.0], [2400.0, 105.0], [2500.0, 76.0], [2600.0, 74.0], [2700.0, 63.0], [2800.0, 63.0], [2900.0, 37.0], [3000.0, 69.0], [3100.0, 40.0], [3300.0, 59.0], [3200.0, 54.0], [3400.0, 44.0], [3500.0, 38.0], [3600.0, 34.0], [3700.0, 10.0], [3800.0, 17.0], [3900.0, 13.0], [4000.0, 6.0], [4300.0, 11.0], [4200.0, 6.0], [4100.0, 10.0], [4500.0, 6.0], [4600.0, 2.0], [4400.0, 9.0], [4700.0, 4.0], [4800.0, 3.0], [5100.0, 4.0], [5000.0, 1.0], [4900.0, 1.0], [5200.0, 1.0], [5300.0, 1.0], [5600.0, 2.0], [5500.0, 3.0], [5400.0, 1.0], [5700.0, 1.0], [5800.0, 2.0], [5900.0, 3.0], [6100.0, 3.0], [6200.0, 3.0], [6300.0, 1.0], [6600.0, 1.0], [6500.0, 1.0], [6700.0, 2.0], [6800.0, 2.0], [7000.0, 1.0], [7100.0, 1.0], [7300.0, 2.0], [7700.0, 1.0], [8600.0, 1.0], [8700.0, 1.0], [8400.0, 1.0], [9000.0, 5.0], [9200.0, 2.0], [9100.0, 2.0], [8800.0, 5.0], [8900.0, 1.0], [9700.0, 11.0], [9600.0, 12.0], [9400.0, 5.0], [9500.0, 15.0], [9300.0, 1.0], [10200.0, 27.0], [9800.0, 10.0], [9900.0, 9.0], [10100.0, 14.0], [10000.0, 1.0], [10300.0, 29.0], [10500.0, 6.0], [10600.0, 3.0], [10400.0, 12.0], [10700.0, 2.0], [11200.0, 2.0], [10900.0, 3.0], [11100.0, 1.0], [10800.0, 3.0], [11000.0, 1.0], [11600.0, 5.0], [11500.0, 4.0], [11700.0, 5.0], [11300.0, 2.0], [11400.0, 1.0], [12200.0, 1.0], [12100.0, 4.0], [11900.0, 1.0], [11800.0, 4.0], [12000.0, 1.0], [12600.0, 2.0], [12700.0, 1.0], [13200.0, 3.0], [13300.0, 1.0], [13000.0, 1.0], [13500.0, 1.0], [13600.0, 2.0], [13400.0, 1.0], [13900.0, 1.0], [14000.0, 1.0], [14100.0, 2.0], [14200.0, 1.0], [14500.0, 3.0], [15100.0, 1.0], [15300.0, 1.0], [15200.0, 1.0], [15700.0, 1.0], [15800.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [15900.0, 1.0], [16200.0, 1.0], [20500.0, 1.0], [24900.0, 1.0], [25400.0, 1.0], [25900.0, 1.0], [26600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 118.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10147.0, "series": [{"data": [[0.0, 10147.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4675.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2169.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 118.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 39.20198675496688, "minX": 1.61720046E12, "maxY": 149.66172787979903, "series": [{"data": [[1.61720046E12, 71.23127160968129], [1.61720058E12, 39.20198675496688], [1.61720052E12, 98.46759559300058]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group Load", "isController": false}, {"data": [[1.61720058E12, 79.54971590909089]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group Spike", "isController": false}, {"data": [[1.61720058E12, 64.47200315457405], [1.61720064E12, 149.66172787979903]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group Stress", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720064E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 294.0, "minX": 1.0, "maxY": 4552.0, "series": [{"data": [[2.0, 3709.8], [3.0, 2414.333333333333], [4.0, 2851.3333333333335], [5.0, 2515.625], [6.0, 1711.6], [7.0, 1262.8461538461538], [8.0, 1262.9411764705883], [9.0, 2542.7857142857147], [10.0, 1690.375], [11.0, 2008.583333333333], [12.0, 1148.0], [13.0, 1632.8095238095243], [14.0, 1602.375], [15.0, 1293.6315789473686], [16.0, 1017.1250000000001], [17.0, 1163.5], [18.0, 948.15625], [19.0, 948.8800000000001], [20.0, 1179.7], [21.0, 1069.2666666666667], [22.0, 926.2222222222222], [23.0, 892.2500000000001], [24.0, 969.909090909091], [25.0, 1073.875], [26.0, 878.6923076923077], [27.0, 925.0789473684209], [28.0, 965.3548387096776], [29.0, 703.9285714285714], [30.0, 754.4468085106386], [31.0, 792.1219512195121], [32.0, 788.5], [33.0, 928.1764705882351], [34.0, 795.5434782608694], [35.0, 665.5306122448978], [36.0, 731.0200000000001], [37.0, 751.5624999999999], [38.0, 663.9491525423729], [39.0, 703.9038461538462], [40.0, 669.9230769230769], [41.0, 814.5882352941176], [42.0, 605.2941176470589], [43.0, 629.8500000000003], [44.0, 699.9818181818182], [45.0, 630.3384615384616], [46.0, 606.0547945205478], [47.0, 522.2333333333331], [48.0, 555.5357142857144], [49.0, 501.0119047619049], [50.0, 673.0140845070421], [51.0, 645.8591549295772], [52.0, 484.1044776119404], [53.0, 650.4556962025315], [54.0, 627.0379746835442], [55.0, 483.8771929824561], [56.0, 580.8873239436621], [57.0, 573.7972972972972], [58.0, 625.7252747252749], [59.0, 634.1971830985913], [60.0, 668.4805194805195], [61.0, 540.9875000000004], [62.0, 577.3736263736264], [63.0, 533.820895522388], [64.0, 496.375], [65.0, 674.8205128205128], [66.0, 580.3150684931508], [67.0, 580.9523809523812], [68.0, 640.6626506024096], [69.0, 591.9305555555554], [70.0, 636.7323943661969], [71.0, 521.6210526315788], [72.0, 583.8913043478261], [73.0, 792.2567567567569], [74.0, 617.2249999999998], [75.0, 845.5697674418608], [76.0, 1653.532110091743], [77.0, 652.2837837837839], [78.0, 611.8906249999999], [79.0, 886.2089552238805], [80.0, 684.1562500000002], [81.0, 711.5113636363639], [82.0, 623.8351648351648], [83.0, 685.1166666666667], [84.0, 852.1333333333333], [85.0, 653.8712871287128], [86.0, 637.4473684210528], [87.0, 699.6847826086957], [88.0, 733.5111111111108], [89.0, 707.5180722891567], [90.0, 727.1684210526315], [91.0, 726.6470588235294], [92.0, 630.6052631578946], [93.0, 655.9634146341465], [94.0, 699.457943925234], [95.0, 803.6022727272729], [96.0, 695.8210526315789], [97.0, 779.2555555555556], [98.0, 699.3148148148149], [99.0, 706.5241379310343], [100.0, 950.8094149908609], [101.0, 409.8222222222222], [102.0, 653.4318181818182], [103.0, 365.5853658536586], [104.0, 431.1627906976744], [105.0, 446.9347826086956], [106.0, 418.2745098039216], [107.0, 365.7692307692307], [108.0, 395.37254901960785], [109.0, 400.70833333333337], [110.0, 556.7551020408164], [111.0, 814.6851851851852], [112.0, 551.7115384615385], [113.0, 593.782608695652], [114.0, 372.29729729729723], [115.0, 570.9130434782608], [116.0, 988.0000000000001], [117.0, 1311.5490196078433], [118.0, 941.6153846153845], [119.0, 444.04761904761904], [120.0, 1290.6304347826083], [121.0, 432.5499999999999], [122.0, 492.5681818181818], [123.0, 678.2], [124.0, 923.9375000000001], [125.0, 1202.4347826086953], [126.0, 444.5], [127.0, 1226.5], [128.0, 1150.8000000000002], [129.0, 1114.0425531914893], [130.0, 1529.787234042553], [131.0, 743.4893617021279], [132.0, 526.5833333333334], [133.0, 871.2500000000001], [134.0, 1348.7547169811323], [135.0, 768.7115384615383], [136.0, 445.40000000000003], [137.0, 1251.9183673469388], [138.0, 500.10416666666674], [139.0, 935.6000000000003], [140.0, 1025.8799999999994], [141.0, 965.5769230769233], [142.0, 1558.5312500000002], [143.0, 708.1400000000003], [144.0, 952.191489361702], [145.0, 500.8125], [146.0, 477.3720930232558], [147.0, 481.20833333333326], [148.0, 928.7551020408164], [149.0, 1042.8205128205127], [150.0, 1543.125], [151.0, 1052.3684210526312], [152.0, 670.9999999999998], [153.0, 900.5434782608695], [154.0, 1166.545454545455], [155.0, 901.5238095238096], [156.0, 728.0392156862745], [157.0, 1257.9636363636364], [158.0, 1046.9374999999995], [159.0, 1391.4166666666663], [160.0, 1278.452380952381], [161.0, 1270.1842105263158], [162.0, 1029.3478260869565], [163.0, 824.3392857142859], [164.0, 600.218181818182], [165.0, 498.6], [166.0, 1282.0], [167.0, 647.8599999999999], [168.0, 1094.2452830188681], [169.0, 1282.1111111111113], [170.0, 1029.5833333333335], [171.0, 1052.5999999999997], [172.0, 867.6458333333333], [173.0, 1115.777777777778], [174.0, 1144.527272727273], [175.0, 1386.9374999999995], [176.0, 1343.5849056603772], [177.0, 1528.2549019607843], [178.0, 1235.2363636363643], [179.0, 1509.409090909091], [180.0, 839.5238095238097], [181.0, 1147.2941176470588], [182.0, 1000.5882352941175], [183.0, 1142.9473684210527], [184.0, 716.9999999999998], [185.0, 659.3962264150945], [186.0, 1168.8837209302321], [187.0, 1264.627450980392], [188.0, 1276.283018867925], [189.0, 1223.3061224489795], [190.0, 1134.6363636363637], [191.0, 851.9411764705882], [192.0, 1162.813953488372], [193.0, 1571.3214285714287], [194.0, 1058.6808510638298], [195.0, 1016.3333333333333], [196.0, 1408.428571428571], [197.0, 1205.5000000000007], [198.0, 1069.3392857142856], [199.0, 964.8478260869563], [200.0, 294.0], [1.0, 4552.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[101.79899468116183, 876.6937284470155]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4989.083333333333, "minX": 1.61720046E12, "maxY": 330445.13333333336, "series": [{"data": [[1.61720046E12, 140041.46666666667], [1.61720058E12, 187744.8], [1.61720052E12, 330445.13333333336], [1.61720064E12, 256301.73333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61720046E12, 4989.083333333333], [1.61720058E12, 6788.833333333333], [1.61720052E12, 11829.666666666666], [1.61720064E12, 9184.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720064E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 577.9068322981384, "minX": 1.61720046E12, "maxY": 1069.180717863103, "series": [{"data": [[1.61720046E12, 716.4037648866695], [1.61720058E12, 577.9068322981384], [1.61720052E12, 966.3146467919648], [1.61720064E12, 1069.180717863103]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720064E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 576.0824392998298, "minX": 1.61720046E12, "maxY": 1067.4063021702827, "series": [{"data": [[1.61720046E12, 714.4260468689976], [1.61720058E12, 576.0824392998298], [1.61720052E12, 964.8927414128309], [1.61720064E12, 1067.4063021702827]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720064E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 29.589215132693415, "minX": 1.61720046E12, "maxY": 32.83634268152137, "series": [{"data": [[1.61720046E12, 32.83634268152137], [1.61720058E12, 29.589215132693415], [1.61720052E12, 30.016202203499674], [1.61720064E12, 32.30509181969957]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720064E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 237.0, "minX": 1.61720046E12, "maxY": 26636.0, "series": [{"data": [[1.61720046E12, 4797.0], [1.61720058E12, 20579.0], [1.61720052E12, 7703.0], [1.61720064E12, 26636.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61720046E12, 1579.6], [1.61720058E12, 1011.0], [1.61720052E12, 2456.7000000000016], [1.61720064E12, 1333.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61720046E12, 3867.000000000002], [1.61720058E12, 2530.26], [1.61720052E12, 3804.1800000000003], [1.61720064E12, 11732.439999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61720046E12, 2218.399999999998], [1.61720058E12, 1303.2999999999993], [1.61720052E12, 3080.8999999999996], [1.61720064E12, 2283.2499999999973]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61720046E12, 240.0], [1.61720058E12, 237.0], [1.61720052E12, 239.0], [1.61720064E12, 239.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61720046E12, 429.0], [1.61720058E12, 338.0], [1.61720052E12, 455.0], [1.61720064E12, 389.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720064E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 283.5, "minX": 1.0, "maxY": 10569.0, "series": [{"data": [[3.0, 8868.0], [4.0, 283.5], [6.0, 1661.5], [7.0, 2756.0], [8.0, 9603.0], [9.0, 9753.5], [11.0, 9602.0], [14.0, 406.0], [15.0, 350.0], [17.0, 2859.0], [19.0, 319.0], [21.0, 569.0], [25.0, 347.0], [27.0, 353.0], [29.0, 644.0], [30.0, 341.5], [33.0, 383.0], [32.0, 401.5], [35.0, 947.0], [39.0, 368.0], [40.0, 415.0], [41.0, 739.0], [45.0, 572.0], [49.0, 450.0], [53.0, 388.0], [54.0, 403.5], [55.0, 365.0], [57.0, 1753.0], [61.0, 371.0], [60.0, 372.0], [62.0, 440.5], [67.0, 444.0], [64.0, 430.5], [70.0, 416.5], [71.0, 364.0], [68.0, 357.0], [73.0, 355.5], [78.0, 1227.0], [79.0, 460.5], [82.0, 383.5], [81.0, 495.5], [80.0, 603.5], [86.0, 498.0], [87.0, 340.5], [89.0, 372.0], [88.0, 486.0], [90.0, 888.5], [91.0, 723.0], [92.0, 483.5], [95.0, 608.0], [94.0, 380.0], [97.0, 372.0], [96.0, 582.5], [98.0, 554.5], [99.0, 350.0], [101.0, 355.0], [102.0, 415.5], [106.0, 515.0], [105.0, 448.0], [108.0, 338.0], [110.0, 459.0], [111.0, 481.5], [113.0, 379.0], [114.0, 404.0], [112.0, 415.5], [115.0, 491.0], [116.0, 459.0], [117.0, 538.0], [118.0, 351.0], [119.0, 331.5], [120.0, 347.5], [123.0, 353.0], [122.0, 424.5], [127.0, 408.0], [124.0, 401.5], [125.0, 309.0], [126.0, 368.5], [129.0, 419.0], [133.0, 382.0], [130.0, 415.0], [128.0, 352.0], [140.0, 341.0], [141.0, 387.0], [138.0, 650.0], [149.0, 341.0], [145.0, 322.0], [144.0, 339.0], [146.0, 353.0], [150.0, 487.0], [154.0, 368.0], [158.0, 404.0], [157.0, 428.0], [164.0, 319.5], [160.0, 353.0], [163.0, 344.0], [161.0, 471.5], [167.0, 446.5], [165.0, 532.0], [175.0, 426.0], [170.0, 479.0], [174.0, 379.0], [169.0, 494.5], [1.0, 2617.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 959.0], [128.0, 5539.0], [140.0, 10316.0], [141.0, 10226.0], [144.0, 10392.5], [146.0, 10264.0], [149.0, 10301.0], [150.0, 10255.0], [39.0, 674.0], [158.0, 10397.0], [161.0, 10569.0], [167.0, 10308.0], [175.0, 10264.5], [174.0, 10202.0], [169.0, 10213.0], [14.0, 6088.5], [19.0, 665.5], [81.0, 662.0], [25.0, 677.0], [108.0, 10290.0], [117.0, 3801.0], [116.0, 1397.0], [123.0, 10301.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 175.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 283.5, "minX": 1.0, "maxY": 10569.0, "series": [{"data": [[3.0, 8868.0], [4.0, 283.5], [6.0, 1661.5], [7.0, 2756.0], [8.0, 9583.0], [9.0, 9753.0], [11.0, 9602.0], [14.0, 405.5], [15.0, 350.0], [17.0, 2859.0], [19.0, 319.0], [21.0, 568.0], [25.0, 347.0], [27.0, 352.0], [29.0, 644.0], [30.0, 341.0], [33.0, 383.0], [32.0, 401.5], [35.0, 947.0], [39.0, 367.5], [40.0, 415.0], [41.0, 739.0], [45.0, 562.0], [49.0, 449.0], [53.0, 388.0], [54.0, 375.5], [55.0, 365.0], [57.0, 1753.0], [61.0, 370.0], [60.0, 372.0], [62.0, 425.0], [67.0, 444.0], [64.0, 430.0], [70.0, 414.0], [71.0, 363.5], [68.0, 356.5], [73.0, 354.5], [78.0, 1227.0], [79.0, 460.5], [82.0, 379.5], [81.0, 482.5], [80.0, 590.5], [86.0, 476.0], [87.0, 340.0], [89.0, 371.0], [88.0, 483.0], [90.0, 888.0], [91.0, 723.0], [92.0, 478.0], [95.0, 608.0], [94.0, 379.5], [97.0, 372.0], [96.0, 580.0], [98.0, 539.5], [99.0, 350.0], [101.0, 355.0], [102.0, 415.5], [106.0, 513.0], [105.0, 448.0], [108.0, 337.0], [110.0, 458.5], [111.0, 478.0], [113.0, 378.0], [114.0, 404.0], [112.0, 415.5], [115.0, 491.0], [116.0, 456.0], [117.0, 498.0], [118.0, 348.0], [119.0, 330.0], [120.0, 347.0], [123.0, 353.0], [122.0, 411.5], [127.0, 408.0], [124.0, 399.0], [125.0, 309.0], [126.0, 368.0], [129.0, 419.0], [133.0, 382.0], [130.0, 411.0], [128.0, 350.5], [140.0, 340.0], [141.0, 386.5], [138.0, 649.5], [149.0, 341.0], [145.0, 322.0], [144.0, 337.5], [146.0, 352.0], [150.0, 487.0], [154.0, 366.0], [158.0, 402.0], [157.0, 428.0], [164.0, 317.5], [160.0, 352.5], [163.0, 340.0], [161.0, 471.0], [167.0, 446.0], [165.0, 526.0], [175.0, 423.0], [170.0, 479.0], [174.0, 379.0], [169.0, 494.5], [1.0, 2617.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 959.0], [128.0, 5539.0], [140.0, 10316.0], [141.0, 10226.0], [144.0, 10392.5], [146.0, 10264.0], [149.0, 10301.0], [150.0, 10255.0], [39.0, 674.0], [158.0, 10397.0], [161.0, 10569.0], [167.0, 10308.0], [175.0, 10264.5], [174.0, 10202.0], [169.0, 10213.0], [14.0, 6088.5], [19.0, 665.5], [81.0, 662.0], [25.0, 677.0], [108.0, 10290.0], [117.0, 3801.0], [116.0, 1397.0], [123.0, 10301.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 175.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 45.05, "minX": 1.61720046E12, "maxY": 102.16666666666667, "series": [{"data": [[1.61720046E12, 45.05], [1.61720058E12, 59.75], [1.61720052E12, 102.16666666666667], [1.61720064E12, 78.18333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720064E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.61720046E12, "maxY": 102.33333333333333, "series": [{"data": [[1.61720046E12, 43.38333333333333], [1.61720058E12, 58.1], [1.61720052E12, 102.33333333333333], [1.61720064E12, 79.36666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61720058E12, 0.9333333333333333], [1.61720052E12, 0.5333333333333333], [1.61720064E12, 0.5]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720064E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.61720046E12, "maxY": 102.33333333333333, "series": [{"data": [[1.61720046E12, 43.38333333333333], [1.61720058E12, 58.1], [1.61720052E12, 102.33333333333333], [1.61720064E12, 79.36666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.61720058E12, 0.9333333333333333], [1.61720052E12, 0.5333333333333333], [1.61720064E12, 0.5]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720064E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.61720046E12, "maxY": 102.33333333333333, "series": [{"data": [[1.61720046E12, 43.38333333333333], [1.61720058E12, 58.1], [1.61720052E12, 102.33333333333333], [1.61720064E12, 79.36666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61720058E12, 0.9333333333333333], [1.61720052E12, 0.5333333333333333], [1.61720064E12, 0.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720064E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

