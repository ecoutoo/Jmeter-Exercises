/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 4203.0, "series": [{"data": [[0.0, 1126.0], [0.1, 1126.0], [0.2, 1126.0], [0.3, 1126.0], [0.4, 1126.0], [0.5, 1126.0], [0.6, 1126.0], [0.7, 1126.0], [0.8, 1126.0], [0.9, 1126.0], [1.0, 1126.0], [1.1, 1126.0], [1.2, 1126.0], [1.3, 1126.0], [1.4, 1126.0], [1.5, 1126.0], [1.6, 1126.0], [1.7, 1126.0], [1.8, 1126.0], [1.9, 1126.0], [2.0, 1126.0], [2.1, 1126.0], [2.2, 1126.0], [2.3, 1126.0], [2.4, 1126.0], [2.5, 1126.0], [2.6, 1126.0], [2.7, 1126.0], [2.8, 1126.0], [2.9, 1126.0], [3.0, 1126.0], [3.1, 1126.0], [3.2, 1126.0], [3.3, 1126.0], [3.4, 1126.0], [3.5, 1126.0], [3.6, 1126.0], [3.7, 1126.0], [3.8, 1126.0], [3.9, 1126.0], [4.0, 1126.0], [4.1, 1126.0], [4.2, 1126.0], [4.3, 1126.0], [4.4, 1126.0], [4.5, 1126.0], [4.6, 1126.0], [4.7, 1126.0], [4.8, 1126.0], [4.9, 1126.0], [5.0, 1126.0], [5.1, 1126.0], [5.2, 1126.0], [5.3, 1126.0], [5.4, 1126.0], [5.5, 1126.0], [5.6, 1126.0], [5.7, 1126.0], [5.8, 1126.0], [5.9, 1126.0], [6.0, 1126.0], [6.1, 1126.0], [6.2, 1126.0], [6.3, 1126.0], [6.4, 1126.0], [6.5, 1126.0], [6.6, 1126.0], [6.7, 1126.0], [6.8, 1126.0], [6.9, 1126.0], [7.0, 1126.0], [7.1, 1126.0], [7.2, 1126.0], [7.3, 1126.0], [7.4, 1126.0], [7.5, 1126.0], [7.6, 1126.0], [7.7, 1126.0], [7.8, 1126.0], [7.9, 1126.0], [8.0, 1126.0], [8.1, 1126.0], [8.2, 1126.0], [8.3, 1126.0], [8.4, 1126.0], [8.5, 1126.0], [8.6, 1126.0], [8.7, 1126.0], [8.8, 1126.0], [8.9, 1126.0], [9.0, 1126.0], [9.1, 1126.0], [9.2, 1126.0], [9.3, 1126.0], [9.4, 1126.0], [9.5, 1126.0], [9.6, 1126.0], [9.7, 1126.0], [9.8, 1126.0], [9.9, 1126.0], [10.0, 1126.0], [10.1, 1126.0], [10.2, 1126.0], [10.3, 1126.0], [10.4, 1126.0], [10.5, 1126.0], [10.6, 1126.0], [10.7, 1126.0], [10.8, 1126.0], [10.9, 1126.0], [11.0, 1126.0], [11.1, 1126.0], [11.2, 1126.0], [11.3, 1126.0], [11.4, 1126.0], [11.5, 1126.0], [11.6, 1126.0], [11.7, 1126.0], [11.8, 1126.0], [11.9, 1126.0], [12.0, 1126.0], [12.1, 1126.0], [12.2, 1126.0], [12.3, 1126.0], [12.4, 1126.0], [12.5, 1126.0], [12.6, 1126.0], [12.7, 1126.0], [12.8, 1126.0], [12.9, 1126.0], [13.0, 1126.0], [13.1, 1126.0], [13.2, 1126.0], [13.3, 1126.0], [13.4, 1126.0], [13.5, 1126.0], [13.6, 1126.0], [13.7, 1126.0], [13.8, 1126.0], [13.9, 1126.0], [14.0, 1126.0], [14.1, 1126.0], [14.2, 1126.0], [14.3, 1126.0], [14.4, 1126.0], [14.5, 1126.0], [14.6, 1126.0], [14.7, 1126.0], [14.8, 1126.0], [14.9, 1126.0], [15.0, 1126.0], [15.1, 1126.0], [15.2, 1126.0], [15.3, 1126.0], [15.4, 1126.0], [15.5, 1126.0], [15.6, 1126.0], [15.7, 1126.0], [15.8, 1126.0], [15.9, 1126.0], [16.0, 1126.0], [16.1, 1126.0], [16.2, 1126.0], [16.3, 1126.0], [16.4, 1126.0], [16.5, 1126.0], [16.6, 1126.0], [16.7, 1126.0], [16.8, 1126.0], [16.9, 1126.0], [17.0, 1126.0], [17.1, 1126.0], [17.2, 1126.0], [17.3, 1126.0], [17.4, 1126.0], [17.5, 1126.0], [17.6, 1126.0], [17.7, 1126.0], [17.8, 1126.0], [17.9, 1126.0], [18.0, 1126.0], [18.1, 1126.0], [18.2, 1126.0], [18.3, 1126.0], [18.4, 1126.0], [18.5, 1126.0], [18.6, 1126.0], [18.7, 1126.0], [18.8, 1126.0], [18.9, 1126.0], [19.0, 1126.0], [19.1, 1126.0], [19.2, 1126.0], [19.3, 1126.0], [19.4, 1126.0], [19.5, 1126.0], [19.6, 1126.0], [19.7, 1126.0], [19.8, 1126.0], [19.9, 1126.0], [20.0, 1126.0], [20.1, 1126.0], [20.2, 1126.0], [20.3, 1126.0], [20.4, 1126.0], [20.5, 1126.0], [20.6, 1126.0], [20.7, 1126.0], [20.8, 1126.0], [20.9, 1126.0], [21.0, 1126.0], [21.1, 1126.0], [21.2, 1126.0], [21.3, 1126.0], [21.4, 1126.0], [21.5, 1126.0], [21.6, 1126.0], [21.7, 1126.0], [21.8, 1126.0], [21.9, 1126.0], [22.0, 1126.0], [22.1, 1126.0], [22.2, 1126.0], [22.3, 1126.0], [22.4, 1126.0], [22.5, 1126.0], [22.6, 1126.0], [22.7, 1126.0], [22.8, 1126.0], [22.9, 1126.0], [23.0, 1126.0], [23.1, 1126.0], [23.2, 1126.0], [23.3, 1126.0], [23.4, 1126.0], [23.5, 1126.0], [23.6, 1126.0], [23.7, 1126.0], [23.8, 1126.0], [23.9, 1126.0], [24.0, 1126.0], [24.1, 1126.0], [24.2, 1126.0], [24.3, 1126.0], [24.4, 1126.0], [24.5, 1126.0], [24.6, 1126.0], [24.7, 1126.0], [24.8, 1126.0], [24.9, 1126.0], [25.0, 1126.0], [25.1, 1126.0], [25.2, 1126.0], [25.3, 1126.0], [25.4, 1126.0], [25.5, 1126.0], [25.6, 1126.0], [25.7, 1126.0], [25.8, 1126.0], [25.9, 1126.0], [26.0, 1126.0], [26.1, 1126.0], [26.2, 1126.0], [26.3, 1126.0], [26.4, 1126.0], [26.5, 1126.0], [26.6, 1126.0], [26.7, 1126.0], [26.8, 1126.0], [26.9, 1126.0], [27.0, 1126.0], [27.1, 1126.0], [27.2, 1126.0], [27.3, 1126.0], [27.4, 1126.0], [27.5, 1126.0], [27.6, 1126.0], [27.7, 1126.0], [27.8, 1126.0], [27.9, 1126.0], [28.0, 1126.0], [28.1, 1126.0], [28.2, 1126.0], [28.3, 1126.0], [28.4, 1126.0], [28.5, 1126.0], [28.6, 1126.0], [28.7, 1126.0], [28.8, 1126.0], [28.9, 1126.0], [29.0, 1126.0], [29.1, 1126.0], [29.2, 1126.0], [29.3, 1126.0], [29.4, 1126.0], [29.5, 1126.0], [29.6, 1126.0], [29.7, 1126.0], [29.8, 1126.0], [29.9, 1126.0], [30.0, 1126.0], [30.1, 1126.0], [30.2, 1126.0], [30.3, 1126.0], [30.4, 1126.0], [30.5, 1126.0], [30.6, 1126.0], [30.7, 1126.0], [30.8, 1126.0], [30.9, 1126.0], [31.0, 1126.0], [31.1, 1126.0], [31.2, 1126.0], [31.3, 1126.0], [31.4, 1126.0], [31.5, 1126.0], [31.6, 1126.0], [31.7, 1126.0], [31.8, 1126.0], [31.9, 1126.0], [32.0, 1126.0], [32.1, 1126.0], [32.2, 1126.0], [32.3, 1126.0], [32.4, 1126.0], [32.5, 1126.0], [32.6, 1126.0], [32.7, 1126.0], [32.8, 1126.0], [32.9, 1126.0], [33.0, 1126.0], [33.1, 1126.0], [33.2, 1126.0], [33.3, 1126.0], [33.4, 1126.0], [33.5, 1126.0], [33.6, 1126.0], [33.7, 1126.0], [33.8, 1126.0], [33.9, 1126.0], [34.0, 1126.0], [34.1, 1126.0], [34.2, 1126.0], [34.3, 1126.0], [34.4, 1126.0], [34.5, 1126.0], [34.6, 1126.0], [34.7, 1126.0], [34.8, 1126.0], [34.9, 1126.0], [35.0, 1126.0], [35.1, 1126.0], [35.2, 1126.0], [35.3, 1126.0], [35.4, 1126.0], [35.5, 1126.0], [35.6, 1126.0], [35.7, 1126.0], [35.8, 1126.0], [35.9, 1126.0], [36.0, 1126.0], [36.1, 1126.0], [36.2, 1126.0], [36.3, 1126.0], [36.4, 1126.0], [36.5, 1126.0], [36.6, 1126.0], [36.7, 1126.0], [36.8, 1126.0], [36.9, 1126.0], [37.0, 1126.0], [37.1, 1126.0], [37.2, 1126.0], [37.3, 1126.0], [37.4, 1126.0], [37.5, 1126.0], [37.6, 1126.0], [37.7, 1126.0], [37.8, 1126.0], [37.9, 1126.0], [38.0, 1126.0], [38.1, 1126.0], [38.2, 1126.0], [38.3, 1126.0], [38.4, 1126.0], [38.5, 1126.0], [38.6, 1126.0], [38.7, 1126.0], [38.8, 1126.0], [38.9, 1126.0], [39.0, 1126.0], [39.1, 1126.0], [39.2, 1126.0], [39.3, 1126.0], [39.4, 1126.0], [39.5, 1126.0], [39.6, 1126.0], [39.7, 1126.0], [39.8, 1126.0], [39.9, 1126.0], [40.0, 1126.0], [40.1, 1126.0], [40.2, 1126.0], [40.3, 1126.0], [40.4, 1126.0], [40.5, 1126.0], [40.6, 1126.0], [40.7, 1126.0], [40.8, 1126.0], [40.9, 1126.0], [41.0, 1126.0], [41.1, 1126.0], [41.2, 1126.0], [41.3, 1126.0], [41.4, 1126.0], [41.5, 1126.0], [41.6, 1126.0], [41.7, 1126.0], [41.8, 1126.0], [41.9, 1126.0], [42.0, 1126.0], [42.1, 1126.0], [42.2, 1126.0], [42.3, 1126.0], [42.4, 1126.0], [42.5, 1126.0], [42.6, 1126.0], [42.7, 1126.0], [42.8, 1126.0], [42.9, 1126.0], [43.0, 1126.0], [43.1, 1126.0], [43.2, 1126.0], [43.3, 1126.0], [43.4, 1126.0], [43.5, 1126.0], [43.6, 1126.0], [43.7, 1126.0], [43.8, 1126.0], [43.9, 1126.0], [44.0, 1126.0], [44.1, 1126.0], [44.2, 1126.0], [44.3, 1126.0], [44.4, 1126.0], [44.5, 1126.0], [44.6, 1126.0], [44.7, 1126.0], [44.8, 1126.0], [44.9, 1126.0], [45.0, 1126.0], [45.1, 1126.0], [45.2, 1126.0], [45.3, 1126.0], [45.4, 1126.0], [45.5, 1126.0], [45.6, 1126.0], [45.7, 1126.0], [45.8, 1126.0], [45.9, 1126.0], [46.0, 1126.0], [46.1, 1126.0], [46.2, 1126.0], [46.3, 1126.0], [46.4, 1126.0], [46.5, 1126.0], [46.6, 1126.0], [46.7, 1126.0], [46.8, 1126.0], [46.9, 1126.0], [47.0, 1126.0], [47.1, 1126.0], [47.2, 1126.0], [47.3, 1126.0], [47.4, 1126.0], [47.5, 1126.0], [47.6, 1126.0], [47.7, 1126.0], [47.8, 1126.0], [47.9, 1126.0], [48.0, 1126.0], [48.1, 1126.0], [48.2, 1126.0], [48.3, 1126.0], [48.4, 1126.0], [48.5, 1126.0], [48.6, 1126.0], [48.7, 1126.0], [48.8, 1126.0], [48.9, 1126.0], [49.0, 1126.0], [49.1, 1126.0], [49.2, 1126.0], [49.3, 1126.0], [49.4, 1126.0], [49.5, 1126.0], [49.6, 1126.0], [49.7, 1126.0], [49.8, 1126.0], [49.9, 1126.0], [50.0, 4203.0], [50.1, 4203.0], [50.2, 4203.0], [50.3, 4203.0], [50.4, 4203.0], [50.5, 4203.0], [50.6, 4203.0], [50.7, 4203.0], [50.8, 4203.0], [50.9, 4203.0], [51.0, 4203.0], [51.1, 4203.0], [51.2, 4203.0], [51.3, 4203.0], [51.4, 4203.0], [51.5, 4203.0], [51.6, 4203.0], [51.7, 4203.0], [51.8, 4203.0], [51.9, 4203.0], [52.0, 4203.0], [52.1, 4203.0], [52.2, 4203.0], [52.3, 4203.0], [52.4, 4203.0], [52.5, 4203.0], [52.6, 4203.0], [52.7, 4203.0], [52.8, 4203.0], [52.9, 4203.0], [53.0, 4203.0], [53.1, 4203.0], [53.2, 4203.0], [53.3, 4203.0], [53.4, 4203.0], [53.5, 4203.0], [53.6, 4203.0], [53.7, 4203.0], [53.8, 4203.0], [53.9, 4203.0], [54.0, 4203.0], [54.1, 4203.0], [54.2, 4203.0], [54.3, 4203.0], [54.4, 4203.0], [54.5, 4203.0], [54.6, 4203.0], [54.7, 4203.0], [54.8, 4203.0], [54.9, 4203.0], [55.0, 4203.0], [55.1, 4203.0], [55.2, 4203.0], [55.3, 4203.0], [55.4, 4203.0], [55.5, 4203.0], [55.6, 4203.0], [55.7, 4203.0], [55.8, 4203.0], [55.9, 4203.0], [56.0, 4203.0], [56.1, 4203.0], [56.2, 4203.0], [56.3, 4203.0], [56.4, 4203.0], [56.5, 4203.0], [56.6, 4203.0], [56.7, 4203.0], [56.8, 4203.0], [56.9, 4203.0], [57.0, 4203.0], [57.1, 4203.0], [57.2, 4203.0], [57.3, 4203.0], [57.4, 4203.0], [57.5, 4203.0], [57.6, 4203.0], [57.7, 4203.0], [57.8, 4203.0], [57.9, 4203.0], [58.0, 4203.0], [58.1, 4203.0], [58.2, 4203.0], [58.3, 4203.0], [58.4, 4203.0], [58.5, 4203.0], [58.6, 4203.0], [58.7, 4203.0], [58.8, 4203.0], [58.9, 4203.0], [59.0, 4203.0], [59.1, 4203.0], [59.2, 4203.0], [59.3, 4203.0], [59.4, 4203.0], [59.5, 4203.0], [59.6, 4203.0], [59.7, 4203.0], [59.8, 4203.0], [59.9, 4203.0], [60.0, 4203.0], [60.1, 4203.0], [60.2, 4203.0], [60.3, 4203.0], [60.4, 4203.0], [60.5, 4203.0], [60.6, 4203.0], [60.7, 4203.0], [60.8, 4203.0], [60.9, 4203.0], [61.0, 4203.0], [61.1, 4203.0], [61.2, 4203.0], [61.3, 4203.0], [61.4, 4203.0], [61.5, 4203.0], [61.6, 4203.0], [61.7, 4203.0], [61.8, 4203.0], [61.9, 4203.0], [62.0, 4203.0], [62.1, 4203.0], [62.2, 4203.0], [62.3, 4203.0], [62.4, 4203.0], [62.5, 4203.0], [62.6, 4203.0], [62.7, 4203.0], [62.8, 4203.0], [62.9, 4203.0], [63.0, 4203.0], [63.1, 4203.0], [63.2, 4203.0], [63.3, 4203.0], [63.4, 4203.0], [63.5, 4203.0], [63.6, 4203.0], [63.7, 4203.0], [63.8, 4203.0], [63.9, 4203.0], [64.0, 4203.0], [64.1, 4203.0], [64.2, 4203.0], [64.3, 4203.0], [64.4, 4203.0], [64.5, 4203.0], [64.6, 4203.0], [64.7, 4203.0], [64.8, 4203.0], [64.9, 4203.0], [65.0, 4203.0], [65.1, 4203.0], [65.2, 4203.0], [65.3, 4203.0], [65.4, 4203.0], [65.5, 4203.0], [65.6, 4203.0], [65.7, 4203.0], [65.8, 4203.0], [65.9, 4203.0], [66.0, 4203.0], [66.1, 4203.0], [66.2, 4203.0], [66.3, 4203.0], [66.4, 4203.0], [66.5, 4203.0], [66.6, 4203.0], [66.7, 4203.0], [66.8, 4203.0], [66.9, 4203.0], [67.0, 4203.0], [67.1, 4203.0], [67.2, 4203.0], [67.3, 4203.0], [67.4, 4203.0], [67.5, 4203.0], [67.6, 4203.0], [67.7, 4203.0], [67.8, 4203.0], [67.9, 4203.0], [68.0, 4203.0], [68.1, 4203.0], [68.2, 4203.0], [68.3, 4203.0], [68.4, 4203.0], [68.5, 4203.0], [68.6, 4203.0], [68.7, 4203.0], [68.8, 4203.0], [68.9, 4203.0], [69.0, 4203.0], [69.1, 4203.0], [69.2, 4203.0], [69.3, 4203.0], [69.4, 4203.0], [69.5, 4203.0], [69.6, 4203.0], [69.7, 4203.0], [69.8, 4203.0], [69.9, 4203.0], [70.0, 4203.0], [70.1, 4203.0], [70.2, 4203.0], [70.3, 4203.0], [70.4, 4203.0], [70.5, 4203.0], [70.6, 4203.0], [70.7, 4203.0], [70.8, 4203.0], [70.9, 4203.0], [71.0, 4203.0], [71.1, 4203.0], [71.2, 4203.0], [71.3, 4203.0], [71.4, 4203.0], [71.5, 4203.0], [71.6, 4203.0], [71.7, 4203.0], [71.8, 4203.0], [71.9, 4203.0], [72.0, 4203.0], [72.1, 4203.0], [72.2, 4203.0], [72.3, 4203.0], [72.4, 4203.0], [72.5, 4203.0], [72.6, 4203.0], [72.7, 4203.0], [72.8, 4203.0], [72.9, 4203.0], [73.0, 4203.0], [73.1, 4203.0], [73.2, 4203.0], [73.3, 4203.0], [73.4, 4203.0], [73.5, 4203.0], [73.6, 4203.0], [73.7, 4203.0], [73.8, 4203.0], [73.9, 4203.0], [74.0, 4203.0], [74.1, 4203.0], [74.2, 4203.0], [74.3, 4203.0], [74.4, 4203.0], [74.5, 4203.0], [74.6, 4203.0], [74.7, 4203.0], [74.8, 4203.0], [74.9, 4203.0], [75.0, 4203.0], [75.1, 4203.0], [75.2, 4203.0], [75.3, 4203.0], [75.4, 4203.0], [75.5, 4203.0], [75.6, 4203.0], [75.7, 4203.0], [75.8, 4203.0], [75.9, 4203.0], [76.0, 4203.0], [76.1, 4203.0], [76.2, 4203.0], [76.3, 4203.0], [76.4, 4203.0], [76.5, 4203.0], [76.6, 4203.0], [76.7, 4203.0], [76.8, 4203.0], [76.9, 4203.0], [77.0, 4203.0], [77.1, 4203.0], [77.2, 4203.0], [77.3, 4203.0], [77.4, 4203.0], [77.5, 4203.0], [77.6, 4203.0], [77.7, 4203.0], [77.8, 4203.0], [77.9, 4203.0], [78.0, 4203.0], [78.1, 4203.0], [78.2, 4203.0], [78.3, 4203.0], [78.4, 4203.0], [78.5, 4203.0], [78.6, 4203.0], [78.7, 4203.0], [78.8, 4203.0], [78.9, 4203.0], [79.0, 4203.0], [79.1, 4203.0], [79.2, 4203.0], [79.3, 4203.0], [79.4, 4203.0], [79.5, 4203.0], [79.6, 4203.0], [79.7, 4203.0], [79.8, 4203.0], [79.9, 4203.0], [80.0, 4203.0], [80.1, 4203.0], [80.2, 4203.0], [80.3, 4203.0], [80.4, 4203.0], [80.5, 4203.0], [80.6, 4203.0], [80.7, 4203.0], [80.8, 4203.0], [80.9, 4203.0], [81.0, 4203.0], [81.1, 4203.0], [81.2, 4203.0], [81.3, 4203.0], [81.4, 4203.0], [81.5, 4203.0], [81.6, 4203.0], [81.7, 4203.0], [81.8, 4203.0], [81.9, 4203.0], [82.0, 4203.0], [82.1, 4203.0], [82.2, 4203.0], [82.3, 4203.0], [82.4, 4203.0], [82.5, 4203.0], [82.6, 4203.0], [82.7, 4203.0], [82.8, 4203.0], [82.9, 4203.0], [83.0, 4203.0], [83.1, 4203.0], [83.2, 4203.0], [83.3, 4203.0], [83.4, 4203.0], [83.5, 4203.0], [83.6, 4203.0], [83.7, 4203.0], [83.8, 4203.0], [83.9, 4203.0], [84.0, 4203.0], [84.1, 4203.0], [84.2, 4203.0], [84.3, 4203.0], [84.4, 4203.0], [84.5, 4203.0], [84.6, 4203.0], [84.7, 4203.0], [84.8, 4203.0], [84.9, 4203.0], [85.0, 4203.0], [85.1, 4203.0], [85.2, 4203.0], [85.3, 4203.0], [85.4, 4203.0], [85.5, 4203.0], [85.6, 4203.0], [85.7, 4203.0], [85.8, 4203.0], [85.9, 4203.0], [86.0, 4203.0], [86.1, 4203.0], [86.2, 4203.0], [86.3, 4203.0], [86.4, 4203.0], [86.5, 4203.0], [86.6, 4203.0], [86.7, 4203.0], [86.8, 4203.0], [86.9, 4203.0], [87.0, 4203.0], [87.1, 4203.0], [87.2, 4203.0], [87.3, 4203.0], [87.4, 4203.0], [87.5, 4203.0], [87.6, 4203.0], [87.7, 4203.0], [87.8, 4203.0], [87.9, 4203.0], [88.0, 4203.0], [88.1, 4203.0], [88.2, 4203.0], [88.3, 4203.0], [88.4, 4203.0], [88.5, 4203.0], [88.6, 4203.0], [88.7, 4203.0], [88.8, 4203.0], [88.9, 4203.0], [89.0, 4203.0], [89.1, 4203.0], [89.2, 4203.0], [89.3, 4203.0], [89.4, 4203.0], [89.5, 4203.0], [89.6, 4203.0], [89.7, 4203.0], [89.8, 4203.0], [89.9, 4203.0], [90.0, 4203.0], [90.1, 4203.0], [90.2, 4203.0], [90.3, 4203.0], [90.4, 4203.0], [90.5, 4203.0], [90.6, 4203.0], [90.7, 4203.0], [90.8, 4203.0], [90.9, 4203.0], [91.0, 4203.0], [91.1, 4203.0], [91.2, 4203.0], [91.3, 4203.0], [91.4, 4203.0], [91.5, 4203.0], [91.6, 4203.0], [91.7, 4203.0], [91.8, 4203.0], [91.9, 4203.0], [92.0, 4203.0], [92.1, 4203.0], [92.2, 4203.0], [92.3, 4203.0], [92.4, 4203.0], [92.5, 4203.0], [92.6, 4203.0], [92.7, 4203.0], [92.8, 4203.0], [92.9, 4203.0], [93.0, 4203.0], [93.1, 4203.0], [93.2, 4203.0], [93.3, 4203.0], [93.4, 4203.0], [93.5, 4203.0], [93.6, 4203.0], [93.7, 4203.0], [93.8, 4203.0], [93.9, 4203.0], [94.0, 4203.0], [94.1, 4203.0], [94.2, 4203.0], [94.3, 4203.0], [94.4, 4203.0], [94.5, 4203.0], [94.6, 4203.0], [94.7, 4203.0], [94.8, 4203.0], [94.9, 4203.0], [95.0, 4203.0], [95.1, 4203.0], [95.2, 4203.0], [95.3, 4203.0], [95.4, 4203.0], [95.5, 4203.0], [95.6, 4203.0], [95.7, 4203.0], [95.8, 4203.0], [95.9, 4203.0], [96.0, 4203.0], [96.1, 4203.0], [96.2, 4203.0], [96.3, 4203.0], [96.4, 4203.0], [96.5, 4203.0], [96.6, 4203.0], [96.7, 4203.0], [96.8, 4203.0], [96.9, 4203.0], [97.0, 4203.0], [97.1, 4203.0], [97.2, 4203.0], [97.3, 4203.0], [97.4, 4203.0], [97.5, 4203.0], [97.6, 4203.0], [97.7, 4203.0], [97.8, 4203.0], [97.9, 4203.0], [98.0, 4203.0], [98.1, 4203.0], [98.2, 4203.0], [98.3, 4203.0], [98.4, 4203.0], [98.5, 4203.0], [98.6, 4203.0], [98.7, 4203.0], [98.8, 4203.0], [98.9, 4203.0], [99.0, 4203.0], [99.1, 4203.0], [99.2, 4203.0], [99.3, 4203.0], [99.4, 4203.0], [99.5, 4203.0], [99.6, 4203.0], [99.7, 4203.0], [99.8, 4203.0], [99.9, 4203.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[0.0, 7.0], [0.1, 8.0], [0.2, 9.0], [0.3, 10.0], [0.4, 11.0], [0.5, 14.0], [0.6, 21.0], [0.7, 23.0], [0.8, 24.0], [0.9, 25.0], [1.0, 26.0], [1.1, 28.0], [1.2, 30.0], [1.3, 32.0], [1.4, 33.0], [1.5, 33.0], [1.6, 35.0], [1.7, 39.0], [1.8, 40.0], [1.9, 41.0], [2.0, 41.0], [2.1, 43.0], [2.2, 44.0], [2.3, 46.0], [2.4, 47.0], [2.5, 49.0], [2.6, 50.0], [2.7, 51.0], [2.8, 51.0], [2.9, 52.0], [3.0, 52.0], [3.1, 52.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 55.0], [3.8, 56.0], [3.9, 56.0], [4.0, 57.0], [4.1, 58.0], [4.2, 61.0], [4.3, 63.0], [4.4, 65.0], [4.5, 67.0], [4.6, 68.0], [4.7, 69.0], [4.8, 70.0], [4.9, 72.0], [5.0, 73.0], [5.1, 75.0], [5.2, 75.0], [5.3, 76.0], [5.4, 77.0], [5.5, 79.0], [5.6, 80.0], [5.7, 81.0], [5.8, 81.0], [5.9, 83.0], [6.0, 84.0], [6.1, 86.0], [6.2, 87.0], [6.3, 87.0], [6.4, 89.0], [6.5, 90.0], [6.6, 91.0], [6.7, 92.0], [6.8, 94.0], [6.9, 95.0], [7.0, 97.0], [7.1, 99.0], [7.2, 101.0], [7.3, 102.0], [7.4, 103.0], [7.5, 107.0], [7.6, 109.0], [7.7, 110.0], [7.8, 111.0], [7.9, 113.0], [8.0, 116.0], [8.1, 116.0], [8.2, 117.0], [8.3, 118.0], [8.4, 120.0], [8.5, 121.0], [8.6, 123.0], [8.7, 124.0], [8.8, 125.0], [8.9, 125.0], [9.0, 126.0], [9.1, 127.0], [9.2, 127.0], [9.3, 127.0], [9.4, 128.0], [9.5, 128.0], [9.6, 128.0], [9.7, 129.0], [9.8, 130.0], [9.9, 130.0], [10.0, 130.0], [10.1, 131.0], [10.2, 131.0], [10.3, 132.0], [10.4, 132.0], [10.5, 133.0], [10.6, 133.0], [10.7, 133.0], [10.8, 133.0], [10.9, 134.0], [11.0, 134.0], [11.1, 134.0], [11.2, 134.0], [11.3, 134.0], [11.4, 135.0], [11.5, 135.0], [11.6, 135.0], [11.7, 136.0], [11.8, 136.0], [11.9, 137.0], [12.0, 137.0], [12.1, 137.0], [12.2, 137.0], [12.3, 138.0], [12.4, 138.0], [12.5, 139.0], [12.6, 141.0], [12.7, 141.0], [12.8, 142.0], [12.9, 143.0], [13.0, 144.0], [13.1, 145.0], [13.2, 146.0], [13.3, 147.0], [13.4, 147.0], [13.5, 148.0], [13.6, 149.0], [13.7, 149.0], [13.8, 150.0], [13.9, 150.0], [14.0, 150.0], [14.1, 150.0], [14.2, 151.0], [14.3, 151.0], [14.4, 152.0], [14.5, 152.0], [14.6, 153.0], [14.7, 153.0], [14.8, 153.0], [14.9, 154.0], [15.0, 155.0], [15.1, 156.0], [15.2, 156.0], [15.3, 156.0], [15.4, 157.0], [15.5, 159.0], [15.6, 160.0], [15.7, 162.0], [15.8, 162.0], [15.9, 162.0], [16.0, 163.0], [16.1, 164.0], [16.2, 165.0], [16.3, 167.0], [16.4, 169.0], [16.5, 169.0], [16.6, 170.0], [16.7, 171.0], [16.8, 173.0], [16.9, 176.0], [17.0, 176.0], [17.1, 178.0], [17.2, 178.0], [17.3, 179.0], [17.4, 181.0], [17.5, 183.0], [17.6, 184.0], [17.7, 186.0], [17.8, 187.0], [17.9, 188.0], [18.0, 189.0], [18.1, 191.0], [18.2, 192.0], [18.3, 196.0], [18.4, 198.0], [18.5, 199.0], [18.6, 199.0], [18.7, 200.0], [18.8, 202.0], [18.9, 204.0], [19.0, 205.0], [19.1, 206.0], [19.2, 207.0], [19.3, 207.0], [19.4, 209.0], [19.5, 211.0], [19.6, 213.0], [19.7, 215.0], [19.8, 216.0], [19.9, 217.0], [20.0, 219.0], [20.1, 221.0], [20.2, 223.0], [20.3, 224.0], [20.4, 226.0], [20.5, 228.0], [20.6, 229.0], [20.7, 230.0], [20.8, 233.0], [20.9, 236.0], [21.0, 237.0], [21.1, 239.0], [21.2, 241.0], [21.3, 243.0], [21.4, 244.0], [21.5, 244.0], [21.6, 246.0], [21.7, 248.0], [21.8, 249.0], [21.9, 252.0], [22.0, 252.0], [22.1, 253.0], [22.2, 254.0], [22.3, 256.0], [22.4, 258.0], [22.5, 259.0], [22.6, 260.0], [22.7, 262.0], [22.8, 263.0], [22.9, 264.0], [23.0, 268.0], [23.1, 268.0], [23.2, 270.0], [23.3, 270.0], [23.4, 271.0], [23.5, 274.0], [23.6, 276.0], [23.7, 278.0], [23.8, 279.0], [23.9, 279.0], [24.0, 280.0], [24.1, 282.0], [24.2, 284.0], [24.3, 285.0], [24.4, 286.0], [24.5, 288.0], [24.6, 289.0], [24.7, 291.0], [24.8, 291.0], [24.9, 292.0], [25.0, 294.0], [25.1, 295.0], [25.2, 297.0], [25.3, 298.0], [25.4, 299.0], [25.5, 301.0], [25.6, 302.0], [25.7, 302.0], [25.8, 304.0], [25.9, 306.0], [26.0, 309.0], [26.1, 309.0], [26.2, 310.0], [26.3, 311.0], [26.4, 313.0], [26.5, 315.0], [26.6, 317.0], [26.7, 318.0], [26.8, 319.0], [26.9, 320.0], [27.0, 320.0], [27.1, 323.0], [27.2, 324.0], [27.3, 325.0], [27.4, 327.0], [27.5, 327.0], [27.6, 328.0], [27.7, 330.0], [27.8, 331.0], [27.9, 333.0], [28.0, 335.0], [28.1, 335.0], [28.2, 336.0], [28.3, 337.0], [28.4, 339.0], [28.5, 340.0], [28.6, 342.0], [28.7, 344.0], [28.8, 345.0], [28.9, 346.0], [29.0, 347.0], [29.1, 349.0], [29.2, 351.0], [29.3, 352.0], [29.4, 355.0], [29.5, 359.0], [29.6, 361.0], [29.7, 363.0], [29.8, 364.0], [29.9, 366.0], [30.0, 367.0], [30.1, 369.0], [30.2, 371.0], [30.3, 373.0], [30.4, 374.0], [30.5, 374.0], [30.6, 375.0], [30.7, 376.0], [30.8, 377.0], [30.9, 377.0], [31.0, 378.0], [31.1, 379.0], [31.2, 383.0], [31.3, 386.0], [31.4, 386.0], [31.5, 387.0], [31.6, 389.0], [31.7, 390.0], [31.8, 393.0], [31.9, 394.0], [32.0, 395.0], [32.1, 397.0], [32.2, 399.0], [32.3, 399.0], [32.4, 400.0], [32.5, 401.0], [32.6, 402.0], [32.7, 405.0], [32.8, 406.0], [32.9, 407.0], [33.0, 407.0], [33.1, 409.0], [33.2, 411.0], [33.3, 412.0], [33.4, 413.0], [33.5, 414.0], [33.6, 416.0], [33.7, 417.0], [33.8, 420.0], [33.9, 420.0], [34.0, 422.0], [34.1, 425.0], [34.2, 427.0], [34.3, 428.0], [34.4, 429.0], [34.5, 430.0], [34.6, 432.0], [34.7, 433.0], [34.8, 433.0], [34.9, 434.0], [35.0, 436.0], [35.1, 437.0], [35.2, 440.0], [35.3, 442.0], [35.4, 442.0], [35.5, 444.0], [35.6, 446.0], [35.7, 447.0], [35.8, 449.0], [35.9, 451.0], [36.0, 453.0], [36.1, 454.0], [36.2, 455.0], [36.3, 457.0], [36.4, 459.0], [36.5, 460.0], [36.6, 461.0], [36.7, 463.0], [36.8, 465.0], [36.9, 467.0], [37.0, 469.0], [37.1, 470.0], [37.2, 471.0], [37.3, 473.0], [37.4, 475.0], [37.5, 477.0], [37.6, 478.0], [37.7, 481.0], [37.8, 482.0], [37.9, 483.0], [38.0, 485.0], [38.1, 485.0], [38.2, 485.0], [38.3, 486.0], [38.4, 487.0], [38.5, 489.0], [38.6, 489.0], [38.7, 492.0], [38.8, 494.0], [38.9, 495.0], [39.0, 496.0], [39.1, 497.0], [39.2, 501.0], [39.3, 503.0], [39.4, 505.0], [39.5, 509.0], [39.6, 510.0], [39.7, 512.0], [39.8, 517.0], [39.9, 518.0], [40.0, 522.0], [40.1, 525.0], [40.2, 528.0], [40.3, 532.0], [40.4, 534.0], [40.5, 536.0], [40.6, 540.0], [40.7, 541.0], [40.8, 544.0], [40.9, 548.0], [41.0, 551.0], [41.1, 553.0], [41.2, 557.0], [41.3, 560.0], [41.4, 564.0], [41.5, 567.0], [41.6, 568.0], [41.7, 572.0], [41.8, 575.0], [41.9, 576.0], [42.0, 576.0], [42.1, 580.0], [42.2, 583.0], [42.3, 584.0], [42.4, 586.0], [42.5, 587.0], [42.6, 591.0], [42.7, 592.0], [42.8, 595.0], [42.9, 595.0], [43.0, 595.0], [43.1, 598.0], [43.2, 600.0], [43.3, 603.0], [43.4, 603.0], [43.5, 606.0], [43.6, 609.0], [43.7, 612.0], [43.8, 615.0], [43.9, 617.0], [44.0, 622.0], [44.1, 625.0], [44.2, 628.0], [44.3, 632.0], [44.4, 635.0], [44.5, 639.0], [44.6, 642.0], [44.7, 646.0], [44.8, 650.0], [44.9, 653.0], [45.0, 657.0], [45.1, 660.0], [45.2, 664.0], [45.3, 666.0], [45.4, 670.0], [45.5, 674.0], [45.6, 677.0], [45.7, 680.0], [45.8, 683.0], [45.9, 688.0], [46.0, 692.0], [46.1, 695.0], [46.2, 699.0], [46.3, 703.0], [46.4, 707.0], [46.5, 711.0], [46.6, 714.0], [46.7, 715.0], [46.8, 720.0], [46.9, 723.0], [47.0, 727.0], [47.1, 731.0], [47.2, 734.0], [47.3, 735.0], [47.4, 740.0], [47.5, 743.0], [47.6, 745.0], [47.7, 750.0], [47.8, 752.0], [47.9, 758.0], [48.0, 761.0], [48.1, 767.0], [48.2, 769.0], [48.3, 772.0], [48.4, 775.0], [48.5, 781.0], [48.6, 783.0], [48.7, 789.0], [48.8, 790.0], [48.9, 797.0], [49.0, 799.0], [49.1, 804.0], [49.2, 807.0], [49.3, 812.0], [49.4, 815.0], [49.5, 821.0], [49.6, 825.0], [49.7, 828.0], [49.8, 831.0], [49.9, 834.0], [50.0, 839.0], [50.1, 842.0], [50.2, 846.0], [50.3, 849.0], [50.4, 851.0], [50.5, 854.0], [50.6, 856.0], [50.7, 860.0], [50.8, 863.0], [50.9, 868.0], [51.0, 870.0], [51.1, 874.0], [51.2, 878.0], [51.3, 880.0], [51.4, 883.0], [51.5, 885.0], [51.6, 888.0], [51.7, 890.0], [51.8, 895.0], [51.9, 896.0], [52.0, 897.0], [52.1, 897.0], [52.2, 900.0], [52.3, 904.0], [52.4, 907.0], [52.5, 907.0], [52.6, 908.0], [52.7, 911.0], [52.8, 914.0], [52.9, 915.0], [53.0, 917.0], [53.1, 922.0], [53.2, 922.0], [53.3, 924.0], [53.4, 930.0], [53.5, 932.0], [53.6, 932.0], [53.7, 935.0], [53.8, 940.0], [53.9, 942.0], [54.0, 950.0], [54.1, 955.0], [54.2, 958.0], [54.3, 963.0], [54.4, 967.0], [54.5, 972.0], [54.6, 976.0], [54.7, 979.0], [54.8, 985.0], [54.9, 994.0], [55.0, 1000.0], [55.1, 1005.0], [55.2, 1013.0], [55.3, 1018.0], [55.4, 1025.0], [55.5, 1029.0], [55.6, 1035.0], [55.7, 1042.0], [55.8, 1043.0], [55.9, 1048.0], [56.0, 1051.0], [56.1, 1051.0], [56.2, 1057.0], [56.3, 1059.0], [56.4, 1059.0], [56.5, 1064.0], [56.6, 1066.0], [56.7, 1068.0], [56.8, 1073.0], [56.9, 1073.0], [57.0, 1075.0], [57.1, 1078.0], [57.2, 1079.0], [57.3, 1082.0], [57.4, 1086.0], [57.5, 1087.0], [57.6, 1089.0], [57.7, 1094.0], [57.8, 1095.0], [57.9, 1097.0], [58.0, 1100.0], [58.1, 1101.0], [58.2, 1103.0], [58.3, 1109.0], [58.4, 1111.0], [58.5, 1113.0], [58.6, 1118.0], [58.7, 1123.0], [58.8, 1127.0], [58.9, 1131.0], [59.0, 1134.0], [59.1, 1139.0], [59.2, 1143.0], [59.3, 1146.0], [59.4, 1152.0], [59.5, 1157.0], [59.6, 1159.0], [59.7, 1161.0], [59.8, 1164.0], [59.9, 1170.0], [60.0, 1173.0], [60.1, 1176.0], [60.2, 1182.0], [60.3, 1186.0], [60.4, 1187.0], [60.5, 1194.0], [60.6, 1194.0], [60.7, 1197.0], [60.8, 1201.0], [60.9, 1203.0], [61.0, 1206.0], [61.1, 1210.0], [61.2, 1211.0], [61.3, 1218.0], [61.4, 1219.0], [61.5, 1220.0], [61.6, 1228.0], [61.7, 1231.0], [61.8, 1233.0], [61.9, 1241.0], [62.0, 1242.0], [62.1, 1246.0], [62.2, 1250.0], [62.3, 1256.0], [62.4, 1256.0], [62.5, 1259.0], [62.6, 1264.0], [62.7, 1266.0], [62.8, 1272.0], [62.9, 1274.0], [63.0, 1276.0], [63.1, 1277.0], [63.2, 1278.0], [63.3, 1279.0], [63.4, 1279.0], [63.5, 1280.0], [63.6, 1281.0], [63.7, 1283.0], [63.8, 1284.0], [63.9, 1286.0], [64.0, 1288.0], [64.1, 1290.0], [64.2, 1292.0], [64.3, 1294.0], [64.4, 1298.0], [64.5, 1301.0], [64.6, 1301.0], [64.7, 1307.0], [64.8, 1309.0], [64.9, 1310.0], [65.0, 1313.0], [65.1, 1314.0], [65.2, 1315.0], [65.3, 1320.0], [65.4, 1321.0], [65.5, 1322.0], [65.6, 1325.0], [65.7, 1328.0], [65.8, 1329.0], [65.9, 1331.0], [66.0, 1332.0], [66.1, 1335.0], [66.2, 1337.0], [66.3, 1338.0], [66.4, 1344.0], [66.5, 1344.0], [66.6, 1345.0], [66.7, 1348.0], [66.8, 1350.0], [66.9, 1353.0], [67.0, 1355.0], [67.1, 1362.0], [67.2, 1364.0], [67.3, 1376.0], [67.4, 1382.0], [67.5, 1393.0], [67.6, 1404.0], [67.7, 1408.0], [67.8, 1415.0], [67.9, 1423.0], [68.0, 1430.0], [68.1, 1437.0], [68.2, 1443.0], [68.3, 1450.0], [68.4, 1457.0], [68.5, 1467.0], [68.6, 1474.0], [68.7, 1482.0], [68.8, 1491.0], [68.9, 1501.0], [69.0, 1508.0], [69.1, 1515.0], [69.2, 1520.0], [69.3, 1529.0], [69.4, 1537.0], [69.5, 1546.0], [69.6, 1553.0], [69.7, 1563.0], [69.8, 1574.0], [69.9, 1582.0], [70.0, 1589.0], [70.1, 1591.0], [70.2, 1594.0], [70.3, 1597.0], [70.4, 1597.0], [70.5, 1599.0], [70.6, 1600.0], [70.7, 1602.0], [70.8, 1602.0], [70.9, 1603.0], [71.0, 1604.0], [71.1, 1606.0], [71.2, 1608.0], [71.3, 1609.0], [71.4, 1610.0], [71.5, 1610.0], [71.6, 1611.0], [71.7, 1614.0], [71.8, 1615.0], [71.9, 1617.0], [72.0, 1617.0], [72.1, 1618.0], [72.2, 1620.0], [72.3, 1621.0], [72.4, 1621.0], [72.5, 1623.0], [72.6, 1624.0], [72.7, 1624.0], [72.8, 1625.0], [72.9, 1627.0], [73.0, 1628.0], [73.1, 1631.0], [73.2, 1632.0], [73.3, 1632.0], [73.4, 1633.0], [73.5, 1637.0], [73.6, 1637.0], [73.7, 1637.0], [73.8, 1639.0], [73.9, 1643.0], [74.0, 1643.0], [74.1, 1644.0], [74.2, 1644.0], [74.3, 1648.0], [74.4, 1649.0], [74.5, 1649.0], [74.6, 1650.0], [74.7, 1652.0], [74.8, 1652.0], [74.9, 1653.0], [75.0, 1656.0], [75.1, 1659.0], [75.2, 1660.0], [75.3, 1660.0], [75.4, 1660.0], [75.5, 1668.0], [75.6, 1668.0], [75.7, 1668.0], [75.8, 1669.0], [75.9, 1672.0], [76.0, 1672.0], [76.1, 1672.0], [76.2, 1673.0], [76.3, 1676.0], [76.4, 1678.0], [76.5, 1678.0], [76.6, 1679.0], [76.7, 1685.0], [76.8, 1686.0], [76.9, 1687.0], [77.0, 1687.0], [77.1, 1693.0], [77.2, 1694.0], [77.3, 1694.0], [77.4, 1695.0], [77.5, 1697.0], [77.6, 1700.0], [77.7, 1701.0], [77.8, 1701.0], [77.9, 1707.0], [78.0, 1708.0], [78.1, 1708.0], [78.2, 1709.0], [78.3, 1714.0], [78.4, 1715.0], [78.5, 1715.0], [78.6, 1715.0], [78.7, 1719.0], [78.8, 1720.0], [78.9, 1720.0], [79.0, 1721.0], [79.1, 1726.0], [79.2, 1726.0], [79.3, 1727.0], [79.4, 1732.0], [79.5, 1733.0], [79.6, 1734.0], [79.7, 1734.0], [79.8, 1739.0], [79.9, 1739.0], [80.0, 1740.0], [80.1, 1740.0], [80.2, 1746.0], [80.3, 1747.0], [80.4, 1749.0], [80.5, 1749.0], [80.6, 1755.0], [80.7, 1757.0], [80.8, 1757.0], [80.9, 1761.0], [81.0, 1762.0], [81.1, 1764.0], [81.2, 1764.0], [81.3, 1770.0], [81.4, 1770.0], [81.5, 1770.0], [81.6, 1771.0], [81.7, 1775.0], [81.8, 1777.0], [81.9, 1779.0], [82.0, 1780.0], [82.1, 1789.0], [82.2, 1791.0], [82.3, 1791.0], [82.4, 1792.0], [82.5, 1794.0], [82.6, 1795.0], [82.7, 1796.0], [82.8, 1796.0], [82.9, 1800.0], [83.0, 1800.0], [83.1, 1800.0], [83.2, 1807.0], [83.3, 1808.0], [83.4, 1808.0], [83.5, 1808.0], [83.6, 1812.0], [83.7, 1816.0], [83.8, 1817.0], [83.9, 1817.0], [84.0, 1822.0], [84.1, 1823.0], [84.2, 1824.0], [84.3, 1826.0], [84.4, 1829.0], [84.5, 1830.0], [84.6, 1830.0], [84.7, 1832.0], [84.8, 1835.0], [84.9, 1835.0], [85.0, 1835.0], [85.1, 1838.0], [85.2, 1838.0], [85.3, 1839.0], [85.4, 1840.0], [85.5, 1842.0], [85.6, 1843.0], [85.7, 1845.0], [85.8, 1846.0], [85.9, 1846.0], [86.0, 1849.0], [86.1, 1849.0], [86.2, 1849.0], [86.3, 1850.0], [86.4, 1852.0], [86.5, 1852.0], [86.6, 1852.0], [86.7, 1852.0], [86.8, 1853.0], [86.9, 1856.0], [87.0, 1858.0], [87.1, 1859.0], [87.2, 1859.0], [87.3, 1860.0], [87.4, 1863.0], [87.5, 1865.0], [87.6, 1866.0], [87.7, 1866.0], [87.8, 1871.0], [87.9, 1872.0], [88.0, 1872.0], [88.1, 1873.0], [88.2, 1876.0], [88.3, 1876.0], [88.4, 1876.0], [88.5, 1877.0], [88.6, 1880.0], [88.7, 1881.0], [88.8, 1881.0], [88.9, 1883.0], [89.0, 1886.0], [89.1, 1887.0], [89.2, 1887.0], [89.3, 1889.0], [89.4, 1890.0], [89.5, 1890.0], [89.6, 1891.0], [89.7, 1896.0], [89.8, 1896.0], [89.9, 1896.0], [90.0, 1897.0], [90.1, 1903.0], [90.2, 1904.0], [90.3, 1905.0], [90.4, 1905.0], [90.5, 1911.0], [90.6, 1911.0], [90.7, 1912.0], [90.8, 1912.0], [90.9, 1918.0], [91.0, 1919.0], [91.1, 1919.0], [91.2, 1925.0], [91.3, 1925.0], [91.4, 1926.0], [91.5, 1926.0], [91.6, 1929.0], [91.7, 1932.0], [91.8, 1932.0], [91.9, 1932.0], [92.0, 1937.0], [92.1, 1938.0], [92.2, 1939.0], [92.3, 1939.0], [92.4, 1939.0], [92.5, 1945.0], [92.6, 1945.0], [92.7, 1946.0], [92.8, 1950.0], [92.9, 1950.0], [93.0, 1951.0], [93.1, 1951.0], [93.2, 1957.0], [93.3, 1957.0], [93.4, 1957.0], [93.5, 1958.0], [93.6, 1965.0], [93.7, 1965.0], [93.8, 1966.0], [93.9, 1966.0], [94.0, 1971.0], [94.1, 1972.0], [94.2, 1972.0], [94.3, 1973.0], [94.4, 1978.0], [94.5, 1978.0], [94.6, 1978.0], [94.7, 1981.0], [94.8, 1984.0], [94.9, 1984.0], [95.0, 1985.0], [95.1, 1989.0], [95.2, 1990.0], [95.3, 1990.0], [95.4, 1991.0], [95.5, 1993.0], [95.6, 1994.0], [95.7, 1995.0], [95.8, 1995.0], [95.9, 1998.0], [96.0, 1999.0], [96.1, 1999.0], [96.2, 2002.0], [96.3, 2005.0], [96.4, 2006.0], [96.5, 2006.0], [96.6, 2011.0], [96.7, 2014.0], [96.8, 2015.0], [96.9, 2016.0], [97.0, 2016.0], [97.1, 2021.0], [97.2, 2022.0], [97.3, 2023.0], [97.4, 2024.0], [97.5, 2029.0], [97.6, 2030.0], [97.7, 2030.0], [97.8, 2030.0], [97.9, 2036.0], [98.0, 2036.0], [98.1, 2037.0], [98.2, 2038.0], [98.3, 2041.0], [98.4, 2042.0], [98.5, 2043.0], [98.6, 2043.0], [98.7, 2047.0], [98.8, 2047.0], [98.9, 2048.0], [99.0, 2049.0], [99.1, 2054.0], [99.2, 2055.0], [99.3, 2056.0], [99.4, 2056.0], [99.5, 2062.0], [99.6, 2062.0], [99.7, 2063.0], [99.8, 2063.0], [99.9, 2069.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 664.0, "series": [{"data": [[4200.0, 1.0], [1100.0, 1.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[0.0, 413.0], [2100.0, 1.0], [600.0, 175.0], [700.0, 163.0], [200.0, 395.0], [800.0, 183.0], [900.0, 163.0], [1000.0, 173.0], [1100.0, 160.0], [300.0, 401.0], [1200.0, 214.0], [1300.0, 182.0], [1400.0, 76.0], [1500.0, 98.0], [100.0, 664.0], [400.0, 393.0], [1600.0, 402.0], [1700.0, 308.0], [1800.0, 416.0], [1900.0, 354.0], [500.0, 234.0], [2000.0, 222.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5789.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5789.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6172043E12, "maxY": 108.89045936395745, "series": [{"data": [[1.6172043E12, 65.47976878612718], [1.61720436E12, 50.94]], "isOverall": false, "label": "SPIKE", "isController": false}, {"data": [[1.6172043E12, 1.0], [1.61720436E12, 1.0]], "isOverall": false, "label": "CRUD", "isController": false}, {"data": [[1.6172043E12, 15.519230769230766], [1.61720436E12, 75.4367906066538]], "isOverall": false, "label": "LOAD", "isController": false}, {"data": [[1.6172043E12, 15.045454545454541], [1.61720436E12, 108.89045936395745]], "isOverall": false, "label": "STRESS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720436E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.666666666666667, "minX": 1.0, "maxY": 4203.0, "series": [{"data": [[81.0, 1126.0], [192.0, 4203.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[136.5, 2664.5]], "isOverall": false, "label": "Transaction Controller-Aggregated", "isController": true}, {"data": [[2.0, 8.0], [3.0, 7.666666666666667], [4.0, 9.0], [5.0, 9.0], [6.0, 15.428571428571429], [9.0, 34.42857142857143], [10.0, 32.142857142857146], [12.0, 32.888888888888886], [13.0, 50.33333333333333], [14.0, 55.93333333333333], [15.0, 55.72727272727273], [16.0, 99.54545454545455], [17.0, 101.91666666666667], [18.0, 126.33333333333333], [19.0, 134.33333333333334], [20.0, 102.3125], [21.0, 101.23529411764709], [22.0, 139.49999999999997], [23.0, 123.21428571428572], [24.0, 132.23076923076925], [25.0, 96.45454545454548], [26.0, 145.8571428571429], [27.0, 181.11111111111114], [28.0, 181.5], [29.0, 178.92307692307693], [30.0, 134.3636363636364], [31.0, 92.64285714285714], [32.0, 128.6875], [33.0, 159.38461538461542], [34.0, 132.96428571428572], [35.0, 164.85], [36.0, 209.87500000000003], [37.0, 214.78571428571428], [38.0, 261.79999999999995], [39.0, 233.46153846153848], [40.0, 242.06666666666666], [41.0, 254.46666666666667], [42.0, 181.65217391304347], [43.0, 245.69230769230768], [44.0, 309.7], [45.0, 234.70588235294116], [46.0, 215.8888888888889], [47.0, 305.72727272727275], [48.0, 207.9999999999999], [49.0, 170.78947368421052], [50.0, 157.46153846153848], [51.0, 258.0], [52.0, 267.72727272727275], [53.0, 347.93750000000006], [54.0, 338.30769230769226], [55.0, 338.1538461538462], [57.0, 279.3500000000001], [56.0, 335.4117647058824], [58.0, 353.0], [59.0, 334.4], [60.0, 413.9090909090909], [61.0, 236.73076923076923], [62.0, 275.6538461538462], [63.0, 355.46153846153845], [65.0, 231.46874999999997], [66.0, 340.0], [67.0, 413.83333333333337], [64.0, 400.58333333333337], [68.0, 278.475], [69.0, 134.36363636363637], [70.0, 149.6923076923077], [71.0, 185.4782608695652], [72.0, 292.75], [74.0, 295.2352941176471], [75.0, 388.2307692307692], [73.0, 264.2307692307692], [76.0, 352.2], [77.0, 331.99999999999994], [78.0, 554.5], [79.0, 410.3125000000001], [80.0, 518.0833333333334], [81.0, 351.31868131868134], [82.0, 264.3333333333333], [83.0, 196.25], [84.0, 213.50000000000003], [85.0, 275.16666666666674], [86.0, 327.3], [87.0, 348.30769230769226], [88.0, 433.33333333333337], [90.0, 550.7272727272727], [91.0, 584.8461538461538], [89.0, 471.27272727272725], [92.0, 383.71], [93.0, 272.3333333333333], [94.0, 139.38775510204087], [95.0, 422.0], [96.0, 210.5], [97.0, 230.0], [99.0, 379.6923076923077], [98.0, 418.5384615384615], [100.0, 486.5625], [101.0, 577.2307692307692], [102.0, 525.8461538461539], [103.0, 593.7499999999999], [104.0, 617.6875], [105.0, 737.1666666666667], [106.0, 467.5309734513275], [107.0, 305.25], [108.0, 308.6], [110.0, 256.9230769230769], [111.0, 357.72727272727275], [109.0, 263.2], [112.0, 272.7039106145251], [113.0, 684.0], [114.0, 357.8333333333333], [115.0, 254.4], [116.0, 311.18181818181824], [117.0, 375.2], [118.0, 475.6923076923077], [119.0, 529.5384615384615], [120.0, 573.8181818181818], [121.0, 633.1], [122.0, 657.1818181818181], [123.0, 723.3], [124.0, 780.8181818181819], [125.0, 853.8000000000001], [126.0, 890.0], [127.0, 796.4545454545455], [128.0, 907.0], [129.0, 811.3333333333333], [130.0, 858.3636363636364], [131.0, 864.6363636363636], [132.0, 523.6884057971014], [133.0, 407.3333333333333], [134.0, 262.6], [135.0, 270.1666666666667], [136.0, 289.8888888888889], [137.0, 363.59999999999997], [138.0, 432.64285714285717], [139.0, 488.30000000000007], [140.0, 550.1538461538463], [141.0, 642.2222222222222], [142.0, 638.0714285714286], [143.0, 721.4545454545455], [144.0, 728.0], [145.0, 882.4000000000001], [146.0, 1014.0999999999999], [147.0, 1014.7], [148.0, 824.5333333333332], [149.0, 915.0909090909091], [150.0, 1058.8], [151.0, 887.0], [152.0, 888.4615384615386], [153.0, 871.0833333333334], [154.0, 886.5384615384615], [155.0, 1003.8], [156.0, 947.9166666666667], [157.0, 1020.4545454545455], [158.0, 824.1538461538462], [159.0, 1021.1111111111111], [160.0, 474.04], [161.0, 653.8823529411765], [162.0, 917.7692307692308], [163.0, 840.8461538461538], [164.0, 477.2499999999999], [165.0, 1194.2222222222222], [166.0, 937.9230769230771], [167.0, 707.8125], [168.0, 1217.0000000000002], [169.0, 1225.5], [170.0, 1139.818181818182], [171.0, 927.3684210526313], [172.0, 1222.090909090909], [173.0, 1415.4545454545455], [174.0, 1275.9999999999998], [175.0, 1463.2307692307693], [176.0, 1280.3], [177.0, 1356.3999999999999], [178.0, 1346.0], [179.0, 1404.8333333333335], [180.0, 1289.111111111111], [181.0, 1474.3333333333333], [182.0, 1298.6], [183.0, 1484.0833333333335], [184.0, 1430.5833333333335], [185.0, 1425.4166666666667], [186.0, 1380.4545454545455], [187.0, 1328.4444444444443], [188.0, 1332.0], [189.0, 1487.6666666666667], [190.0, 1396.2727272727273], [191.0, 770.9460784313726], [192.0, 1355.4], [194.0, 1059.5], [195.0, 433.45454545454544], [196.0, 495.3636363636363], [197.0, 426.3], [198.0, 829.5], [199.0, 731.0], [193.0, 1893.0], [200.0, 1193.5], [201.0, 1556.6], [202.0, 591.0], [203.0, 1541.0], [204.0, 608.0], [205.0, 1368.0], [206.0, 1061.6666666666667], [207.0, 1176.5], [208.0, 1157.0], [209.0, 1468.2], [210.0, 662.5], [211.0, 1342.0], [212.0, 445.3333333333333], [213.0, 506.8333333333334], [214.0, 706.2857142857143], [215.0, 733.6521739130434], [216.0, 811.1739130434783], [217.0, 953.3333333333333], [218.0, 1009.5555555555557], [220.0, 1252.1428571428569], [221.0, 1386.4347826086957], [222.0, 1508.9565217391307], [223.0, 1472.9285714285718], [219.0, 1165.8421052631581], [224.0, 1500.0000000000005], [225.0, 1508.1739130434783], [226.0, 1570.375], [227.0, 619.3071428571427], [228.0, 1586.7142857142858], [229.0, 1460.3571428571427], [230.0, 1493.25], [231.0, 1578.8387096774195], [232.0, 1615.7142857142856], [233.0, 1611.148148148148], [234.0, 1630.3333333333335], [235.0, 1568.5454545454547], [237.0, 1643.913043478261], [238.0, 1598.1199999999997], [239.0, 1648.5384615384614], [236.0, 1645.2916666666665], [240.0, 1640.833333333333], [241.0, 1632.5555555555554], [242.0, 1639.28], [243.0, 1652.84], [244.0, 1664.521739130435], [245.0, 1660.2222222222222], [246.0, 1686.5454545454543], [247.0, 1688.8333333333335], [248.0, 1701.590909090909], [249.0, 1585.1714285714281], [250.0, 1715.3043478260868], [252.0, 1706.782608695652], [253.0, 1660.3333333333333], [254.0, 1726.1599999999999], [255.0, 1614.7931034482756], [251.0, 1763.05], [257.0, 1770.6521739130433], [256.0, 1674.3076923076926], [258.0, 1718.4583333333333], [259.0, 1709.3461538461543], [260.0, 1755.291666666667], [261.0, 1765.7826086956522], [262.0, 1648.2413793103449], [263.0, 1734.4800000000002], [264.0, 1775.2916666666667], [271.0, 1820.0434782608697], [269.0, 1776.4999999999995], [268.0, 1639.103448275862], [270.0, 1730.9615384615383], [265.0, 1824.2380952380952], [266.0, 1766.4583333333335], [267.0, 1723.2592592592591], [273.0, 1788.7391304347823], [272.0, 1732.111111111111], [274.0, 1668.0999999999997], [275.0, 1882.2857142857142], [276.0, 1859.0434782608695], [277.0, 1723.592592592593], [278.0, 1745.4642857142856], [279.0, 1702.2857142857144], [280.0, 1882.2173913043478], [287.0, 1813.64], [285.0, 1779.6296296296298], [284.0, 1882.608695652174], [286.0, 1955.5454545454545], [281.0, 1830.304347826087], [282.0, 1728.2413793103449], [283.0, 1819.0416666666665], [289.0, 1856.5200000000002], [288.0, 1846.68], [290.0, 1894.875], [291.0, 1899.0833333333335], [292.0, 1857.461538461538], [293.0, 1884.6666666666667], [294.0, 1868.192307692308], [295.0, 1961.304347826087], [296.0, 1864.1153846153848], [302.0, 943.8888888888889], [303.0, 1125.0], [300.0, 1448.0], [301.0, 1363.0], [297.0, 1787.3793103448274], [298.0, 1848.96], [299.0, 1950.0312499999995], [304.0, 941.1666666666667], [305.0, 1403.0], [306.0, 1395.3571428571427], [307.0, 1506.090909090909], [308.0, 1598.95], [309.0, 1602.36], [310.0, 1624.0000000000002], [1.0, 8.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[168.39585492228022, 944.1678756476691]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 310.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6172043E12, "maxY": 201896.8, "series": [{"data": [[1.6172043E12, 22527.816666666666], [1.61720436E12, 201896.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6172043E12, 2.066666666666667], [1.61720436E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720436E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 229.78006872852234, "minX": 1.6172043E12, "maxY": 4203.0, "series": [{"data": [[1.6172043E12, 1126.0], [1.61720436E12, 4203.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.6172043E12, 229.78006872852234], [1.61720436E12, 1024.0015360983073]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720436E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6172043E12, "maxY": 0.5274914089347088, "series": [{"data": [[1.6172043E12, 0.0], [1.61720436E12, 0.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.6172043E12, 0.5274914089347088], [1.61720436E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720436E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 228.88659793814432, "minX": 1.6172043E12, "maxY": 4203.0, "series": [{"data": [[1.6172043E12, 1125.0], [1.61720436E12, 4203.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.6172043E12, 228.88659793814432], [1.61720436E12, 1023.8671274961603]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720436E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 309.0, "minX": 1.6172043E12, "maxY": 309.0, "series": [{"data": [[1.6172043E12, 309.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6172043E12, 309.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6172043E12, 309.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6172043E12, 309.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6172043E12, 309.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6172043E12, 309.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6172043E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 52.0, "minX": 46.0, "maxY": 1989.0, "series": [{"data": [[46.0, 309.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[664.0, 288.0], [46.0, 228.0], [121.0, 692.0], [124.0, 767.5], [127.0, 658.0], [125.0, 1277.0], [128.0, 1058.5], [133.0, 1353.0], [134.0, 1686.0], [135.0, 1749.0], [136.0, 1839.0], [137.0, 1886.0], [138.0, 1984.0], [139.0, 1989.0], [141.0, 52.0], [146.0, 179.0], [161.0, 289.0], [176.0, 386.0], [185.0, 425.0], [229.0, 173.0], [239.0, 526.0], [244.0, 1328.0], [274.0, 239.0], [292.0, 1044.5], [306.0, 377.0], [309.0, 713.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 664.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 46.0, "maxY": 307.0, "series": [{"data": [[46.0, 307.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[664.0, 0.0], [46.0, 0.0], [121.0, 0.0], [124.0, 0.0], [127.0, 0.0], [125.0, 0.0], [128.0, 0.0], [133.0, 0.0], [134.0, 0.0], [135.0, 0.0], [136.0, 0.0], [137.0, 0.0], [138.0, 0.0], [139.0, 0.0], [141.0, 0.0], [146.0, 0.0], [161.0, 0.0], [176.0, 0.0], [185.0, 0.0], [229.0, 0.0], [239.0, 0.0], [244.0, 0.0], [274.0, 0.0], [292.0, 0.0], [306.0, 0.0], [309.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 664.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.5, "minX": 1.6172043E12, "maxY": 86.0, "series": [{"data": [[1.6172043E12, 10.5], [1.61720436E12, 86.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720436E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6172043E12, "maxY": 86.8, "series": [{"data": [[1.6172043E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6172043E12, 9.683333333333334], [1.61720436E12, 86.8]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61720436E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6172043E12, "maxY": 86.8, "series": [{"data": [[1.6172043E12, 9.683333333333334], [1.61720436E12, 86.8]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6172043E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6172043E12, 0.016666666666666666], [1.61720436E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction Controller-failure", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720436E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6172043E12, "maxY": 86.81666666666666, "series": [{"data": [[1.6172043E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6172043E12, 9.7], [1.61720436E12, 86.81666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61720436E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

